// automatically generated by the FlatBuffers compiler, do not modify

package commonpack

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type S_MSG struct {
	_tab flatbuffers.Table
}

func GetRootAsS_MSG(buf []byte, offset flatbuffers.UOffsetT) *S_MSG {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &S_MSG{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *S_MSG) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *S_MSG) AppId() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *S_MSG) MutateAppId(n int16) bool {
	return rcv._tab.MutateInt16Slot(4, n)
}

func (rcv *S_MSG) SessionId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *S_MSG) MutateSessionId(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *S_MSG) ChatType() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *S_MSG) MutateChatType(n int16) bool {
	return rcv._tab.MutateInt16Slot(8, n)
}

func (rcv *S_MSG) MType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *S_MSG) MutateMType(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *S_MSG) SType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *S_MSG) MutateSType(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *S_MSG) ExtType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *S_MSG) MutateExtType(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *S_MSG) MsgContent() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *S_MSG) MsgTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *S_MSG) MutateMsgTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *S_MSG) SendUserName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func S_MSGStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func S_MSGAddAppId(builder *flatbuffers.Builder, appId int16) {
	builder.PrependInt16Slot(0, appId, 0)
}
func S_MSGAddSessionId(builder *flatbuffers.Builder, sessionId int32) {
	builder.PrependInt32Slot(1, sessionId, 0)
}
func S_MSGAddChatType(builder *flatbuffers.Builder, chatType int16) {
	builder.PrependInt16Slot(2, chatType, 0)
}
func S_MSGAddMType(builder *flatbuffers.Builder, mType int32) {
	builder.PrependInt32Slot(3, mType, 0)
}
func S_MSGAddSType(builder *flatbuffers.Builder, sType int32) {
	builder.PrependInt32Slot(4, sType, 0)
}
func S_MSGAddExtType(builder *flatbuffers.Builder, extType int32) {
	builder.PrependInt32Slot(5, extType, 0)
}
func S_MSGAddMsgContent(builder *flatbuffers.Builder, msgContent flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(msgContent), 0)
}
func S_MSGAddMsgTime(builder *flatbuffers.Builder, msgTime int64) {
	builder.PrependInt64Slot(7, msgTime, 0)
}
func S_MSGAddSendUserName(builder *flatbuffers.Builder, sendUserName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(sendUserName), 0)
}
func S_MSGEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
