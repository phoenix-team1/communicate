// automatically generated by the FlatBuffers compiler, do not modify

package ecpack

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type T_ECMSG_INFO struct {
	_tab flatbuffers.Table
}

func GetRootAsT_ECMSG_INFO(buf []byte, offset flatbuffers.UOffsetT) *T_ECMSG_INFO {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &T_ECMSG_INFO{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *T_ECMSG_INFO) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *T_ECMSG_INFO) AppId() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_ECMSG_INFO) MutateAppId(n int16) bool {
	return rcv._tab.MutateInt16Slot(4, n)
}

func (rcv *T_ECMSG_INFO) SessionId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_ECMSG_INFO) MutateSessionId(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *T_ECMSG_INFO) ChatType() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_ECMSG_INFO) MutateChatType(n int16) bool {
	return rcv._tab.MutateInt16Slot(8, n)
}

func (rcv *T_ECMSG_INFO) MType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_ECMSG_INFO) MutateMType(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *T_ECMSG_INFO) SType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_ECMSG_INFO) MutateSType(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *T_ECMSG_INFO) ExtType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_ECMSG_INFO) MutateExtType(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *T_ECMSG_INFO) FromId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_ECMSG_INFO) MutateFromId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(16, n)
}

func (rcv *T_ECMSG_INFO) ToId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_ECMSG_INFO) MutateToId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(18, n)
}

func (rcv *T_ECMSG_INFO) BId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_ECMSG_INFO) MutateBId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(20, n)
}

func (rcv *T_ECMSG_INFO) CId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_ECMSG_INFO) MutateCId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(22, n)
}

func (rcv *T_ECMSG_INFO) WId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_ECMSG_INFO) MutateWId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(24, n)
}

func (rcv *T_ECMSG_INFO) MessageId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_ECMSG_INFO) MutateMessageId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(26, n)
}

func (rcv *T_ECMSG_INFO) MsgTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_ECMSG_INFO) MutateMsgTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(28, n)
}

func (rcv *T_ECMSG_INFO) MsgContent() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *T_ECMSG_INFO) SendUserName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func T_ECMSG_INFOStart(builder *flatbuffers.Builder) {
	builder.StartObject(15)
}
func T_ECMSG_INFOAddAppId(builder *flatbuffers.Builder, appId int16) {
	builder.PrependInt16Slot(0, appId, 0)
}
func T_ECMSG_INFOAddSessionId(builder *flatbuffers.Builder, sessionId int32) {
	builder.PrependInt32Slot(1, sessionId, 0)
}
func T_ECMSG_INFOAddChatType(builder *flatbuffers.Builder, chatType int16) {
	builder.PrependInt16Slot(2, chatType, 0)
}
func T_ECMSG_INFOAddMType(builder *flatbuffers.Builder, mType int32) {
	builder.PrependInt32Slot(3, mType, 0)
}
func T_ECMSG_INFOAddSType(builder *flatbuffers.Builder, sType int32) {
	builder.PrependInt32Slot(4, sType, 0)
}
func T_ECMSG_INFOAddExtType(builder *flatbuffers.Builder, extType int32) {
	builder.PrependInt32Slot(5, extType, 0)
}
func T_ECMSG_INFOAddFromId(builder *flatbuffers.Builder, fromId uint64) {
	builder.PrependUint64Slot(6, fromId, 0)
}
func T_ECMSG_INFOAddToId(builder *flatbuffers.Builder, toId uint64) {
	builder.PrependUint64Slot(7, toId, 0)
}
func T_ECMSG_INFOAddBId(builder *flatbuffers.Builder, bId uint64) {
	builder.PrependUint64Slot(8, bId, 0)
}
func T_ECMSG_INFOAddCId(builder *flatbuffers.Builder, cId uint64) {
	builder.PrependUint64Slot(9, cId, 0)
}
func T_ECMSG_INFOAddWId(builder *flatbuffers.Builder, wId uint64) {
	builder.PrependUint64Slot(10, wId, 0)
}
func T_ECMSG_INFOAddMessageId(builder *flatbuffers.Builder, messageId uint64) {
	builder.PrependUint64Slot(11, messageId, 0)
}
func T_ECMSG_INFOAddMsgTime(builder *flatbuffers.Builder, msgTime int64) {
	builder.PrependInt64Slot(12, msgTime, 0)
}
func T_ECMSG_INFOAddMsgContent(builder *flatbuffers.Builder, msgContent flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(msgContent), 0)
}
func T_ECMSG_INFOAddSendUserName(builder *flatbuffers.Builder, sendUserName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(sendUserName), 0)
}
func T_ECMSG_INFOEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
