// automatically generated by the FlatBuffers compiler, do not modify

package ecpack

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type T_GOODSINFTOIMS struct {
	_tab flatbuffers.Table
}

func GetRootAsT_GOODSINFTOIMS(buf []byte, offset flatbuffers.UOffsetT) *T_GOODSINFTOIMS {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &T_GOODSINFTOIMS{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *T_GOODSINFTOIMS) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *T_GOODSINFTOIMS) GoodsId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_GOODSINFTOIMS) MutateGoodsId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *T_GOODSINFTOIMS) GoodsNum() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_GOODSINFTOIMS) MutateGoodsNum(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *T_GOODSINFTOIMS) SkuId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_GOODSINFTOIMS) MutateSkuId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *T_GOODSINFTOIMS) UnitPrice() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_GOODSINFTOIMS) MutateUnitPrice(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *T_GOODSINFTOIMS) GoodsName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *T_GOODSINFTOIMS) SkuText() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *T_GOODSINFTOIMS) ImgUrl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func T_GOODSINFTOIMSStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func T_GOODSINFTOIMSAddGoodsId(builder *flatbuffers.Builder, goodsId uint64) {
	builder.PrependUint64Slot(0, goodsId, 0)
}
func T_GOODSINFTOIMSAddGoodsNum(builder *flatbuffers.Builder, goodsNum int32) {
	builder.PrependInt32Slot(1, goodsNum, 0)
}
func T_GOODSINFTOIMSAddSkuId(builder *flatbuffers.Builder, skuId uint64) {
	builder.PrependUint64Slot(2, skuId, 0)
}
func T_GOODSINFTOIMSAddUnitPrice(builder *flatbuffers.Builder, unitPrice int32) {
	builder.PrependInt32Slot(3, unitPrice, 0)
}
func T_GOODSINFTOIMSAddGoodsName(builder *flatbuffers.Builder, goodsName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(goodsName), 0)
}
func T_GOODSINFTOIMSAddSkuText(builder *flatbuffers.Builder, skuText flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(skuText), 0)
}
func T_GOODSINFTOIMSAddImgUrl(builder *flatbuffers.Builder, imgUrl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(imgUrl), 0)
}
func T_GOODSINFTOIMSEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
