// automatically generated by the FlatBuffers compiler, do not modify

package ecpack

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type T_ORDER_INFO struct {
	_tab flatbuffers.Table
}

func GetRootAsT_ORDER_INFO(buf []byte, offset flatbuffers.UOffsetT) *T_ORDER_INFO {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &T_ORDER_INFO{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *T_ORDER_INFO) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *T_ORDER_INFO) BuyerId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_ORDER_INFO) MutateBuyerId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *T_ORDER_INFO) OrderId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_ORDER_INFO) MutateOrderId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *T_ORDER_INFO) PayTime() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_ORDER_INFO) MutatePayTime(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *T_ORDER_INFO) SellerId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_ORDER_INFO) MutateSellerId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(10, n)
}

func (rcv *T_ORDER_INFO) TotalAmount() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_ORDER_INFO) MutateTotalAmount(n uint64) bool {
	return rcv._tab.MutateUint64Slot(12, n)
}

func (rcv *T_ORDER_INFO) Orderstate() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_ORDER_INFO) MutateOrderstate(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *T_ORDER_INFO) Orderstatestr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *T_ORDER_INFO) GoodsInfoDto4IMs(obj *T_GOODSINFTOIMS, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *T_ORDER_INFO) GoodsInfoDto4IMsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func T_ORDER_INFOStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func T_ORDER_INFOAddBuyerId(builder *flatbuffers.Builder, buyerId uint64) {
	builder.PrependUint64Slot(0, buyerId, 0)
}
func T_ORDER_INFOAddOrderId(builder *flatbuffers.Builder, orderId uint64) {
	builder.PrependUint64Slot(1, orderId, 0)
}
func T_ORDER_INFOAddPayTime(builder *flatbuffers.Builder, payTime uint64) {
	builder.PrependUint64Slot(2, payTime, 0)
}
func T_ORDER_INFOAddSellerId(builder *flatbuffers.Builder, sellerId uint64) {
	builder.PrependUint64Slot(3, sellerId, 0)
}
func T_ORDER_INFOAddTotalAmount(builder *flatbuffers.Builder, totalAmount uint64) {
	builder.PrependUint64Slot(4, totalAmount, 0)
}
func T_ORDER_INFOAddOrderstate(builder *flatbuffers.Builder, orderstate int32) {
	builder.PrependInt32Slot(5, orderstate, 0)
}
func T_ORDER_INFOAddOrderstatestr(builder *flatbuffers.Builder, orderstatestr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(orderstatestr), 0)
}
func T_ORDER_INFOAddGoodsInfoDto4IMs(builder *flatbuffers.Builder, goodsInfoDto4IMs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(goodsInfoDto4IMs), 0)
}
func T_ORDER_INFOStartGoodsInfoDto4IMsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func T_ORDER_INFOEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
