// automatically generated by the FlatBuffers compiler, do not modify

package friendpack

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type T_FREIND_INFO struct {
	_tab flatbuffers.Table
}

func GetRootAsT_FREIND_INFO(buf []byte, offset flatbuffers.UOffsetT) *T_FREIND_INFO {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &T_FREIND_INFO{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *T_FREIND_INFO) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *T_FREIND_INFO) UserId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_FREIND_INFO) MutateUserId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *T_FREIND_INFO) SourceType() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_FREIND_INFO) MutateSourceType(n int8) bool {
	return rcv._tab.MutateInt8Slot(6, n)
}

func (rcv *T_FREIND_INFO) RemarkName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *T_FREIND_INFO) OpMsg() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *T_FREIND_INFO) OptType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_FREIND_INFO) MutateOptType(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *T_FREIND_INFO) BlackType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_FREIND_INFO) MutateBlackType(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *T_FREIND_INFO) OpTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_FREIND_INFO) MutateOpTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func T_FREIND_INFOStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func T_FREIND_INFOAddUserId(builder *flatbuffers.Builder, userId uint64) {
	builder.PrependUint64Slot(0, userId, 0)
}
func T_FREIND_INFOAddSourceType(builder *flatbuffers.Builder, sourceType int8) {
	builder.PrependInt8Slot(1, sourceType, 0)
}
func T_FREIND_INFOAddRemarkName(builder *flatbuffers.Builder, remarkName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(remarkName), 0)
}
func T_FREIND_INFOAddOpMsg(builder *flatbuffers.Builder, opMsg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(opMsg), 0)
}
func T_FREIND_INFOAddOptType(builder *flatbuffers.Builder, optType int32) {
	builder.PrependInt32Slot(4, optType, 0)
}
func T_FREIND_INFOAddBlackType(builder *flatbuffers.Builder, blackType int32) {
	builder.PrependInt32Slot(5, blackType, 0)
}
func T_FREIND_INFOAddOpTime(builder *flatbuffers.Builder, opTime int64) {
	builder.PrependInt64Slot(6, opTime, 0)
}
func T_FREIND_INFOEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
