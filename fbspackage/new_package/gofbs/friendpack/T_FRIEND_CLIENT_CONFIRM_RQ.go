// automatically generated by the FlatBuffers compiler, do not modify

package friendpack

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type T_FRIEND_CLIENT_CONFIRM_RQ struct {
	_tab flatbuffers.Table
}

func GetRootAsT_FRIEND_CLIENT_CONFIRM_RQ(buf []byte, offset flatbuffers.UOffsetT) *T_FRIEND_CLIENT_CONFIRM_RQ {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &T_FRIEND_CLIENT_CONFIRM_RQ{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *T_FRIEND_CLIENT_CONFIRM_RQ) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *T_FRIEND_CLIENT_CONFIRM_RQ) SRqHead(obj *S_RQ_HEAD) *S_RQ_HEAD {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(S_RQ_HEAD)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *T_FRIEND_CLIENT_CONFIRM_RQ) OwnNickname() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *T_FRIEND_CLIENT_CONFIRM_RQ) PeerUserId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_FRIEND_CLIENT_CONFIRM_RQ) MutatePeerUserId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *T_FRIEND_CLIENT_CONFIRM_RQ) SourceType() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_FRIEND_CLIENT_CONFIRM_RQ) MutateSourceType(n int8) bool {
	return rcv._tab.MutateInt8Slot(10, n)
}

func (rcv *T_FRIEND_CLIENT_CONFIRM_RQ) PeerRemark() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *T_FRIEND_CLIENT_CONFIRM_RQ) Token() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_FRIEND_CLIENT_CONFIRM_RQ) MutateToken(n uint64) bool {
	return rcv._tab.MutateUint64Slot(14, n)
}

func (rcv *T_FRIEND_CLIENT_CONFIRM_RQ) Result() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_FRIEND_CLIENT_CONFIRM_RQ) MutateResult(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func T_FRIEND_CLIENT_CONFIRM_RQStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func T_FRIEND_CLIENT_CONFIRM_RQAddSRqHead(builder *flatbuffers.Builder, sRqHead flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(sRqHead), 0)
}
func T_FRIEND_CLIENT_CONFIRM_RQAddOwnNickname(builder *flatbuffers.Builder, ownNickname flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(ownNickname), 0)
}
func T_FRIEND_CLIENT_CONFIRM_RQAddPeerUserId(builder *flatbuffers.Builder, peerUserId uint64) {
	builder.PrependUint64Slot(2, peerUserId, 0)
}
func T_FRIEND_CLIENT_CONFIRM_RQAddSourceType(builder *flatbuffers.Builder, sourceType int8) {
	builder.PrependInt8Slot(3, sourceType, 0)
}
func T_FRIEND_CLIENT_CONFIRM_RQAddPeerRemark(builder *flatbuffers.Builder, peerRemark flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(peerRemark), 0)
}
func T_FRIEND_CLIENT_CONFIRM_RQAddToken(builder *flatbuffers.Builder, token uint64) {
	builder.PrependUint64Slot(5, token, 0)
}
func T_FRIEND_CLIENT_CONFIRM_RQAddResult(builder *flatbuffers.Builder, result int32) {
	builder.PrependInt32Slot(6, result, 0)
}
func T_FRIEND_CLIENT_CONFIRM_RQEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
