// automatically generated by the FlatBuffers compiler, do not modify

package grouppack

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type T_GROUP_CREATE_RQ struct {
	_tab flatbuffers.Table
}

func GetRootAsT_GROUP_CREATE_RQ(buf []byte, offset flatbuffers.UOffsetT) *T_GROUP_CREATE_RQ {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &T_GROUP_CREATE_RQ{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *T_GROUP_CREATE_RQ) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *T_GROUP_CREATE_RQ) SRqHead(obj *S_RQ_HEAD) *S_RQ_HEAD {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(S_RQ_HEAD)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *T_GROUP_CREATE_RQ) GroupName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *T_GROUP_CREATE_RQ) GroupImgUrl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *T_GROUP_CREATE_RQ) GroupRemark() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *T_GROUP_CREATE_RQ) GroupCt() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_GROUP_CREATE_RQ) MutateGroupCt(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *T_GROUP_CREATE_RQ) GroupType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_GROUP_CREATE_RQ) MutateGroupType(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *T_GROUP_CREATE_RQ) OfflineGroupMsg(obj *T_OFFLINE_GROUP_MSG) *T_OFFLINE_GROUP_MSG {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(T_OFFLINE_GROUP_MSG)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func T_GROUP_CREATE_RQStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func T_GROUP_CREATE_RQAddSRqHead(builder *flatbuffers.Builder, sRqHead flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(sRqHead), 0)
}
func T_GROUP_CREATE_RQAddGroupName(builder *flatbuffers.Builder, groupName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(groupName), 0)
}
func T_GROUP_CREATE_RQAddGroupImgUrl(builder *flatbuffers.Builder, groupImgUrl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(groupImgUrl), 0)
}
func T_GROUP_CREATE_RQAddGroupRemark(builder *flatbuffers.Builder, groupRemark flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(groupRemark), 0)
}
func T_GROUP_CREATE_RQAddGroupCt(builder *flatbuffers.Builder, groupCt int64) {
	builder.PrependInt64Slot(4, groupCt, 0)
}
func T_GROUP_CREATE_RQAddGroupType(builder *flatbuffers.Builder, groupType int32) {
	builder.PrependInt32Slot(5, groupType, 0)
}
func T_GROUP_CREATE_RQAddOfflineGroupMsg(builder *flatbuffers.Builder, offlineGroupMsg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(offlineGroupMsg), 0)
}
func T_GROUP_CREATE_RQEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
