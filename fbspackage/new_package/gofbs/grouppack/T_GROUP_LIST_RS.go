// automatically generated by the FlatBuffers compiler, do not modify

package grouppack

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type T_GROUP_LIST_RS struct {
	_tab flatbuffers.Table
}

func GetRootAsT_GROUP_LIST_RS(buf []byte, offset flatbuffers.UOffsetT) *T_GROUP_LIST_RS {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &T_GROUP_LIST_RS{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *T_GROUP_LIST_RS) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *T_GROUP_LIST_RS) SRsHead(obj *S_RS_HEAD) *S_RS_HEAD {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(S_RS_HEAD)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *T_GROUP_LIST_RS) GroupInfoList(obj *T_GROUP_BASE_INFO, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *T_GROUP_LIST_RS) GroupInfoListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *T_GROUP_LIST_RS) GroupListIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_GROUP_LIST_RS) MutateGroupListIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func T_GROUP_LIST_RSStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func T_GROUP_LIST_RSAddSRsHead(builder *flatbuffers.Builder, sRsHead flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(sRsHead), 0)
}
func T_GROUP_LIST_RSAddGroupInfoList(builder *flatbuffers.Builder, groupInfoList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(groupInfoList), 0)
}
func T_GROUP_LIST_RSStartGroupInfoListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func T_GROUP_LIST_RSAddGroupListIndex(builder *flatbuffers.Builder, groupListIndex int32) {
	builder.PrependInt32Slot(2, groupListIndex, 0)
}
func T_GROUP_LIST_RSEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
