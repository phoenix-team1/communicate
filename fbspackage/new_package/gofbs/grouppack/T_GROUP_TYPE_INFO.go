// automatically generated by the FlatBuffers compiler, do not modify

package grouppack

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type T_GROUP_TYPE_INFO struct {
	_tab flatbuffers.Table
}

func GetRootAsT_GROUP_TYPE_INFO(buf []byte, offset flatbuffers.UOffsetT) *T_GROUP_TYPE_INFO {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &T_GROUP_TYPE_INFO{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *T_GROUP_TYPE_INFO) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *T_GROUP_TYPE_INFO) GroupMaxCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_GROUP_TYPE_INFO) MutateGroupMaxCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *T_GROUP_TYPE_INFO) GroupType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_GROUP_TYPE_INFO) MutateGroupType(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *T_GROUP_TYPE_INFO) GroupIsShow() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_GROUP_TYPE_INFO) MutateGroupIsShow(n int8) bool {
	return rcv._tab.MutateInt8Slot(8, n)
}

func (rcv *T_GROUP_TYPE_INFO) GroupAddMaxCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_GROUP_TYPE_INFO) MutateGroupAddMaxCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func T_GROUP_TYPE_INFOStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func T_GROUP_TYPE_INFOAddGroupMaxCount(builder *flatbuffers.Builder, groupMaxCount int32) {
	builder.PrependInt32Slot(0, groupMaxCount, 0)
}
func T_GROUP_TYPE_INFOAddGroupType(builder *flatbuffers.Builder, groupType int32) {
	builder.PrependInt32Slot(1, groupType, 0)
}
func T_GROUP_TYPE_INFOAddGroupIsShow(builder *flatbuffers.Builder, groupIsShow int8) {
	builder.PrependInt8Slot(2, groupIsShow, 0)
}
func T_GROUP_TYPE_INFOAddGroupAddMaxCount(builder *flatbuffers.Builder, groupAddMaxCount int32) {
	builder.PrependInt32Slot(3, groupAddMaxCount, 0)
}
func T_GROUP_TYPE_INFOEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
