// automatically generated by the FlatBuffers compiler, do not modify

package grouppack

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type T_OPERATE_GROUP_MSG struct {
	_tab flatbuffers.Table
}

func GetRootAsT_OPERATE_GROUP_MSG(buf []byte, offset flatbuffers.UOffsetT) *T_OPERATE_GROUP_MSG {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &T_OPERATE_GROUP_MSG{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *T_OPERATE_GROUP_MSG) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *T_OPERATE_GROUP_MSG) MsgTime() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_OPERATE_GROUP_MSG) MutateMsgTime(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *T_OPERATE_GROUP_MSG) OperateUserName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *T_OPERATE_GROUP_MSG) UserInfoList(obj *USER_BASE_INFO, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *T_OPERATE_GROUP_MSG) UserInfoListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *T_OPERATE_GROUP_MSG) GroupModifyContent() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func T_OPERATE_GROUP_MSGStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func T_OPERATE_GROUP_MSGAddMsgTime(builder *flatbuffers.Builder, msgTime uint64) {
	builder.PrependUint64Slot(0, msgTime, 0)
}
func T_OPERATE_GROUP_MSGAddOperateUserName(builder *flatbuffers.Builder, operateUserName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(operateUserName), 0)
}
func T_OPERATE_GROUP_MSGAddUserInfoList(builder *flatbuffers.Builder, userInfoList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(userInfoList), 0)
}
func T_OPERATE_GROUP_MSGStartUserInfoListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func T_OPERATE_GROUP_MSGAddGroupModifyContent(builder *flatbuffers.Builder, groupModifyContent flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(groupModifyContent), 0)
}
func T_OPERATE_GROUP_MSGEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
