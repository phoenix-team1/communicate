// automatically generated by the FlatBuffers compiler, do not modify

package momentspack

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type T_MOMENTS_ARTICLE_ADD_RQ struct {
	_tab flatbuffers.Table
}

func GetRootAsT_MOMENTS_ARTICLE_ADD_RQ(buf []byte, offset flatbuffers.UOffsetT) *T_MOMENTS_ARTICLE_ADD_RQ {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &T_MOMENTS_ARTICLE_ADD_RQ{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *T_MOMENTS_ARTICLE_ADD_RQ) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *T_MOMENTS_ARTICLE_ADD_RQ) SRqHead(obj *S_RQ_HEAD) *S_RQ_HEAD {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(S_RQ_HEAD)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *T_MOMENTS_ARTICLE_ADD_RQ) ArticleId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_MOMENTS_ARTICLE_ADD_RQ) MutateArticleId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *T_MOMENTS_ARTICLE_ADD_RQ) UserId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_MOMENTS_ARTICLE_ADD_RQ) MutateUserId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *T_MOMENTS_ARTICLE_ADD_RQ) UserNickname() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *T_MOMENTS_ARTICLE_ADD_RQ) Title() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *T_MOMENTS_ARTICLE_ADD_RQ) ContentType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_MOMENTS_ARTICLE_ADD_RQ) MutateContentType(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *T_MOMENTS_ARTICLE_ADD_RQ) Content() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *T_MOMENTS_ARTICLE_ADD_RQ) PrivType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_MOMENTS_ARTICLE_ADD_RQ) MutatePrivType(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *T_MOMENTS_ARTICLE_ADD_RQ) WhiteList() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *T_MOMENTS_ARTICLE_ADD_RQ) BlackList() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func T_MOMENTS_ARTICLE_ADD_RQStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func T_MOMENTS_ARTICLE_ADD_RQAddSRqHead(builder *flatbuffers.Builder, sRqHead flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(sRqHead), 0)
}
func T_MOMENTS_ARTICLE_ADD_RQAddArticleId(builder *flatbuffers.Builder, articleId uint64) {
	builder.PrependUint64Slot(1, articleId, 0)
}
func T_MOMENTS_ARTICLE_ADD_RQAddUserId(builder *flatbuffers.Builder, userId uint64) {
	builder.PrependUint64Slot(2, userId, 0)
}
func T_MOMENTS_ARTICLE_ADD_RQAddUserNickname(builder *flatbuffers.Builder, userNickname flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(userNickname), 0)
}
func T_MOMENTS_ARTICLE_ADD_RQAddTitle(builder *flatbuffers.Builder, title flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(title), 0)
}
func T_MOMENTS_ARTICLE_ADD_RQAddContentType(builder *flatbuffers.Builder, contentType int32) {
	builder.PrependInt32Slot(5, contentType, 0)
}
func T_MOMENTS_ARTICLE_ADD_RQAddContent(builder *flatbuffers.Builder, content flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(content), 0)
}
func T_MOMENTS_ARTICLE_ADD_RQAddPrivType(builder *flatbuffers.Builder, privType int32) {
	builder.PrependInt32Slot(7, privType, 0)
}
func T_MOMENTS_ARTICLE_ADD_RQAddWhiteList(builder *flatbuffers.Builder, whiteList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(whiteList), 0)
}
func T_MOMENTS_ARTICLE_ADD_RQAddBlackList(builder *flatbuffers.Builder, blackList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(blackList), 0)
}
func T_MOMENTS_ARTICLE_ADD_RQEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
