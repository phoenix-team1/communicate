// automatically generated by the FlatBuffers compiler, do not modify

package offcialpack

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type T_OFFCIAL_OFFLINE_MESSAGE struct {
	_tab flatbuffers.Table
}

func GetRootAsT_OFFCIAL_OFFLINE_MESSAGE(buf []byte, offset flatbuffers.UOffsetT) *T_OFFCIAL_OFFLINE_MESSAGE {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &T_OFFCIAL_OFFLINE_MESSAGE{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *T_OFFCIAL_OFFLINE_MESSAGE) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *T_OFFCIAL_OFFLINE_MESSAGE) IsFinish() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_OFFCIAL_OFFLINE_MESSAGE) MutateIsFinish(n int8) bool {
	return rcv._tab.MutateInt8Slot(4, n)
}

func (rcv *T_OFFCIAL_OFFLINE_MESSAGE) OffcialId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_OFFCIAL_OFFLINE_MESSAGE) MutateOffcialId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *T_OFFCIAL_OFFLINE_MESSAGE) SMsg(obj *T_OFFLINE_MESSAGE, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *T_OFFCIAL_OFFLINE_MESSAGE) SMsgLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *T_OFFCIAL_OFFLINE_MESSAGE) BId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_OFFCIAL_OFFLINE_MESSAGE) MutateBId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(10, n)
}

func (rcv *T_OFFCIAL_OFFLINE_MESSAGE) WId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_OFFCIAL_OFFLINE_MESSAGE) MutateWId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(12, n)
}

func (rcv *T_OFFCIAL_OFFLINE_MESSAGE) CId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_OFFCIAL_OFFLINE_MESSAGE) MutateCId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(14, n)
}

func T_OFFCIAL_OFFLINE_MESSAGEStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func T_OFFCIAL_OFFLINE_MESSAGEAddIsFinish(builder *flatbuffers.Builder, isFinish int8) {
	builder.PrependInt8Slot(0, isFinish, 0)
}
func T_OFFCIAL_OFFLINE_MESSAGEAddOffcialId(builder *flatbuffers.Builder, offcialId uint64) {
	builder.PrependUint64Slot(1, offcialId, 0)
}
func T_OFFCIAL_OFFLINE_MESSAGEAddSMsg(builder *flatbuffers.Builder, sMsg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(sMsg), 0)
}
func T_OFFCIAL_OFFLINE_MESSAGEStartSMsgVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func T_OFFCIAL_OFFLINE_MESSAGEAddBId(builder *flatbuffers.Builder, bId uint64) {
	builder.PrependUint64Slot(3, bId, 0)
}
func T_OFFCIAL_OFFLINE_MESSAGEAddWId(builder *flatbuffers.Builder, wId uint64) {
	builder.PrependUint64Slot(4, wId, 0)
}
func T_OFFCIAL_OFFLINE_MESSAGEAddCId(builder *flatbuffers.Builder, cId uint64) {
	builder.PrependUint64Slot(5, cId, 0)
}
func T_OFFCIAL_OFFLINE_MESSAGEEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
