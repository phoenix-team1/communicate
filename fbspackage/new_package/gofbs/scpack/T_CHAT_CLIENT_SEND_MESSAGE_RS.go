// automatically generated by the FlatBuffers compiler, do not modify

package scpack

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type T_CHAT_CLIENT_SEND_MESSAGE_RS struct {
	_tab flatbuffers.Table
}

func GetRootAsT_CHAT_CLIENT_SEND_MESSAGE_RS(buf []byte, offset flatbuffers.UOffsetT) *T_CHAT_CLIENT_SEND_MESSAGE_RS {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &T_CHAT_CLIENT_SEND_MESSAGE_RS{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *T_CHAT_CLIENT_SEND_MESSAGE_RS) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *T_CHAT_CLIENT_SEND_MESSAGE_RS) SRsHead(obj *S_RS_HEAD) *S_RS_HEAD {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(S_RS_HEAD)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *T_CHAT_CLIENT_SEND_MESSAGE_RS) OpUserId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_CHAT_CLIENT_SEND_MESSAGE_RS) MutateOpUserId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *T_CHAT_CLIENT_SEND_MESSAGE_RS) MessageId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_CHAT_CLIENT_SEND_MESSAGE_RS) MutateMessageId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *T_CHAT_CLIENT_SEND_MESSAGE_RS) SMsg(obj *S_MSG) *S_MSG {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(S_MSG)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *T_CHAT_CLIENT_SEND_MESSAGE_RS) BId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_CHAT_CLIENT_SEND_MESSAGE_RS) MutateBId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(12, n)
}

func (rcv *T_CHAT_CLIENT_SEND_MESSAGE_RS) WId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_CHAT_CLIENT_SEND_MESSAGE_RS) MutateWId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(14, n)
}

func (rcv *T_CHAT_CLIENT_SEND_MESSAGE_RS) CId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_CHAT_CLIENT_SEND_MESSAGE_RS) MutateCId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(16, n)
}

func T_CHAT_CLIENT_SEND_MESSAGE_RSStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func T_CHAT_CLIENT_SEND_MESSAGE_RSAddSRsHead(builder *flatbuffers.Builder, sRsHead flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(sRsHead), 0)
}
func T_CHAT_CLIENT_SEND_MESSAGE_RSAddOpUserId(builder *flatbuffers.Builder, opUserId uint64) {
	builder.PrependUint64Slot(1, opUserId, 0)
}
func T_CHAT_CLIENT_SEND_MESSAGE_RSAddMessageId(builder *flatbuffers.Builder, messageId uint64) {
	builder.PrependUint64Slot(2, messageId, 0)
}
func T_CHAT_CLIENT_SEND_MESSAGE_RSAddSMsg(builder *flatbuffers.Builder, sMsg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(sMsg), 0)
}
func T_CHAT_CLIENT_SEND_MESSAGE_RSAddBId(builder *flatbuffers.Builder, bId uint64) {
	builder.PrependUint64Slot(4, bId, 0)
}
func T_CHAT_CLIENT_SEND_MESSAGE_RSAddWId(builder *flatbuffers.Builder, wId uint64) {
	builder.PrependUint64Slot(5, wId, 0)
}
func T_CHAT_CLIENT_SEND_MESSAGE_RSAddCId(builder *flatbuffers.Builder, cId uint64) {
	builder.PrependUint64Slot(6, cId, 0)
}
func T_CHAT_CLIENT_SEND_MESSAGE_RSEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
