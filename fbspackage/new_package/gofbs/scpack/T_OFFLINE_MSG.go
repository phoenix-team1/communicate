// automatically generated by the FlatBuffers compiler, do not modify

package scpack

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type T_OFFLINE_MSG struct {
	_tab flatbuffers.Table
}

func GetRootAsT_OFFLINE_MSG(buf []byte, offset flatbuffers.UOffsetT) *T_OFFLINE_MSG {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &T_OFFLINE_MSG{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *T_OFFLINE_MSG) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *T_OFFLINE_MSG) OpUserId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_OFFLINE_MSG) MutateOpUserId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *T_OFFLINE_MSG) MessageId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_OFFLINE_MSG) MutateMessageId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *T_OFFLINE_MSG) SMsg(obj *S_MSG) *S_MSG {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(S_MSG)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *T_OFFLINE_MSG) BId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_OFFLINE_MSG) MutateBId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(10, n)
}

func (rcv *T_OFFLINE_MSG) WId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_OFFLINE_MSG) MutateWId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(12, n)
}

func (rcv *T_OFFLINE_MSG) CId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *T_OFFLINE_MSG) MutateCId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(14, n)
}

func T_OFFLINE_MSGStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func T_OFFLINE_MSGAddOpUserId(builder *flatbuffers.Builder, opUserId uint64) {
	builder.PrependUint64Slot(0, opUserId, 0)
}
func T_OFFLINE_MSGAddMessageId(builder *flatbuffers.Builder, messageId uint64) {
	builder.PrependUint64Slot(1, messageId, 0)
}
func T_OFFLINE_MSGAddSMsg(builder *flatbuffers.Builder, sMsg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(sMsg), 0)
}
func T_OFFLINE_MSGAddBId(builder *flatbuffers.Builder, bId uint64) {
	builder.PrependUint64Slot(3, bId, 0)
}
func T_OFFLINE_MSGAddWId(builder *flatbuffers.Builder, wId uint64) {
	builder.PrependUint64Slot(4, wId, 0)
}
func T_OFFLINE_MSGAddCId(builder *flatbuffers.Builder, cId uint64) {
	builder.PrependUint64Slot(5, cId, 0)
}
func T_OFFLINE_MSGEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
