// automatically generated by the FlatBuffers compiler, do not modify

package userpack

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type T_CHANGE_MAIL_RS struct {
	_tab flatbuffers.Table
}

func GetRootAsT_CHANGE_MAIL_RS(buf []byte, offset flatbuffers.UOffsetT) *T_CHANGE_MAIL_RS {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &T_CHANGE_MAIL_RS{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *T_CHANGE_MAIL_RS) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *T_CHANGE_MAIL_RS) SRsHead(obj *S_RS_HEAD) *S_RS_HEAD {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(S_RS_HEAD)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *T_CHANGE_MAIL_RS) OldMail() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *T_CHANGE_MAIL_RS) NewMail() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func T_CHANGE_MAIL_RSStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func T_CHANGE_MAIL_RSAddSRsHead(builder *flatbuffers.Builder, sRsHead flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(sRsHead), 0)
}
func T_CHANGE_MAIL_RSAddOldMail(builder *flatbuffers.Builder, oldMail flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(oldMail), 0)
}
func T_CHANGE_MAIL_RSAddNewMail(builder *flatbuffers.Builder, newMail flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(newMail), 0)
}
func T_CHANGE_MAIL_RSEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
