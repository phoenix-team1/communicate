// automatically generated by the FlatBuffers compiler, do not modify

package userpack

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type T_GET_USERLST_INFO_RS struct {
	_tab flatbuffers.Table
}

func GetRootAsT_GET_USERLST_INFO_RS(buf []byte, offset flatbuffers.UOffsetT) *T_GET_USERLST_INFO_RS {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &T_GET_USERLST_INFO_RS{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *T_GET_USERLST_INFO_RS) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *T_GET_USERLST_INFO_RS) SRsHead(obj *S_RS_HEAD) *S_RS_HEAD {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(S_RS_HEAD)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *T_GET_USERLST_INFO_RS) UserLstInfo(obj *T_GET_USERINFO, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *T_GET_USERLST_INFO_RS) UserLstInfoLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *T_GET_USERLST_INFO_RS) UserNoLst(j int) uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *T_GET_USERLST_INFO_RS) UserNoLstLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func T_GET_USERLST_INFO_RSStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func T_GET_USERLST_INFO_RSAddSRsHead(builder *flatbuffers.Builder, sRsHead flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(sRsHead), 0)
}
func T_GET_USERLST_INFO_RSAddUserLstInfo(builder *flatbuffers.Builder, userLstInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(userLstInfo), 0)
}
func T_GET_USERLST_INFO_RSStartUserLstInfoVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func T_GET_USERLST_INFO_RSAddUserNoLst(builder *flatbuffers.Builder, userNoLst flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(userNoLst), 0)
}
func T_GET_USERLST_INFO_RSStartUserNoLstVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func T_GET_USERLST_INFO_RSEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
