// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_COMMON_COMMONPACK_H_
#define FLATBUFFERS_GENERATED_COMMON_COMMONPACK_H_

#include "flatbuffers/flatbuffers.h"

namespace commonpack {

struct S_RQ_HEAD;

struct S_RS_HEAD;

struct S_MSG;

struct USER_BASE_INFO;

struct ACCOUNT_INFO;

MANUALLY_ALIGNED_STRUCT(8) S_RQ_HEAD FLATBUFFERS_FINAL_CLASS {
 private:
  uint64_t user_id_;
  int32_t pack_session_id_;
  int8_t platform_;
  int8_t __padding0;
  int16_t __padding1;

 public:
  S_RQ_HEAD() { memset(this, 0, sizeof(S_RQ_HEAD)); }
  S_RQ_HEAD(const S_RQ_HEAD &_o) { memcpy(this, &_o, sizeof(S_RQ_HEAD)); }
  S_RQ_HEAD(uint64_t _user_id, int32_t _pack_session_id, int8_t _platform)
    : user_id_(flatbuffers::EndianScalar(_user_id)), pack_session_id_(flatbuffers::EndianScalar(_pack_session_id)), platform_(flatbuffers::EndianScalar(_platform)), __padding0(0), __padding1(0) { (void)__padding0; (void)__padding1; }

  uint64_t user_id() const { return flatbuffers::EndianScalar(user_id_); }
  int32_t pack_session_id() const { return flatbuffers::EndianScalar(pack_session_id_); }
  int8_t platform() const { return flatbuffers::EndianScalar(platform_); }
};
STRUCT_END(S_RQ_HEAD, 16);

MANUALLY_ALIGNED_STRUCT(8) S_RS_HEAD FLATBUFFERS_FINAL_CLASS {
 private:
  uint64_t user_id_;
  int32_t pack_session_id_;
  int32_t result_;
  int8_t platform_;
  int8_t __padding0;
  int16_t __padding1;
  int32_t __padding2;

 public:
  S_RS_HEAD() { memset(this, 0, sizeof(S_RS_HEAD)); }
  S_RS_HEAD(const S_RS_HEAD &_o) { memcpy(this, &_o, sizeof(S_RS_HEAD)); }
  S_RS_HEAD(uint64_t _user_id, int32_t _pack_session_id, int32_t _result, int8_t _platform)
    : user_id_(flatbuffers::EndianScalar(_user_id)), pack_session_id_(flatbuffers::EndianScalar(_pack_session_id)), result_(flatbuffers::EndianScalar(_result)), platform_(flatbuffers::EndianScalar(_platform)), __padding0(0), __padding1(0), __padding2(0) { (void)__padding0; (void)__padding1; (void)__padding2; }

  uint64_t user_id() const { return flatbuffers::EndianScalar(user_id_); }
  int32_t pack_session_id() const { return flatbuffers::EndianScalar(pack_session_id_); }
  int32_t result() const { return flatbuffers::EndianScalar(result_); }
  int8_t platform() const { return flatbuffers::EndianScalar(platform_); }
};
STRUCT_END(S_RS_HEAD, 24);

struct S_MSG FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_APP_ID = 4,
    VT_SESSION_ID = 6,
    VT_CHAT_TYPE = 8,
    VT_M_TYPE = 10,
    VT_S_TYPE = 12,
    VT_EXT_TYPE = 14,
    VT_MSG_CONTENT = 16,
    VT_MSG_TIME = 18,
    VT_SEND_USER_NAME = 20
  };
  int16_t app_id() const { return GetField<int16_t>(VT_APP_ID, 0); }
  int32_t session_id() const { return GetField<int32_t>(VT_SESSION_ID, 0); }
  int16_t chat_type() const { return GetField<int16_t>(VT_CHAT_TYPE, 0); }
  int32_t m_type() const { return GetField<int32_t>(VT_M_TYPE, 0); }
  int32_t s_type() const { return GetField<int32_t>(VT_S_TYPE, 0); }
  int32_t ext_type() const { return GetField<int32_t>(VT_EXT_TYPE, 0); }
  const flatbuffers::String *msg_content() const { return GetPointer<const flatbuffers::String *>(VT_MSG_CONTENT); }
  int64_t msg_time() const { return GetField<int64_t>(VT_MSG_TIME, 0); }
  const flatbuffers::String *send_user_name() const { return GetPointer<const flatbuffers::String *>(VT_SEND_USER_NAME); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_APP_ID) &&
           VerifyField<int32_t>(verifier, VT_SESSION_ID) &&
           VerifyField<int16_t>(verifier, VT_CHAT_TYPE) &&
           VerifyField<int32_t>(verifier, VT_M_TYPE) &&
           VerifyField<int32_t>(verifier, VT_S_TYPE) &&
           VerifyField<int32_t>(verifier, VT_EXT_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_MSG_CONTENT) &&
           verifier.Verify(msg_content()) &&
           VerifyField<int64_t>(verifier, VT_MSG_TIME) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_SEND_USER_NAME) &&
           verifier.Verify(send_user_name()) &&
           verifier.EndTable();
  }
};

struct S_MSGBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_app_id(int16_t app_id) { fbb_.AddElement<int16_t>(S_MSG::VT_APP_ID, app_id, 0); }
  void add_session_id(int32_t session_id) { fbb_.AddElement<int32_t>(S_MSG::VT_SESSION_ID, session_id, 0); }
  void add_chat_type(int16_t chat_type) { fbb_.AddElement<int16_t>(S_MSG::VT_CHAT_TYPE, chat_type, 0); }
  void add_m_type(int32_t m_type) { fbb_.AddElement<int32_t>(S_MSG::VT_M_TYPE, m_type, 0); }
  void add_s_type(int32_t s_type) { fbb_.AddElement<int32_t>(S_MSG::VT_S_TYPE, s_type, 0); }
  void add_ext_type(int32_t ext_type) { fbb_.AddElement<int32_t>(S_MSG::VT_EXT_TYPE, ext_type, 0); }
  void add_msg_content(flatbuffers::Offset<flatbuffers::String> msg_content) { fbb_.AddOffset(S_MSG::VT_MSG_CONTENT, msg_content); }
  void add_msg_time(int64_t msg_time) { fbb_.AddElement<int64_t>(S_MSG::VT_MSG_TIME, msg_time, 0); }
  void add_send_user_name(flatbuffers::Offset<flatbuffers::String> send_user_name) { fbb_.AddOffset(S_MSG::VT_SEND_USER_NAME, send_user_name); }
  S_MSGBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  S_MSGBuilder &operator=(const S_MSGBuilder &);
  flatbuffers::Offset<S_MSG> Finish() {
    auto o = flatbuffers::Offset<S_MSG>(fbb_.EndTable(start_, 9));
    return o;
  }
};

inline flatbuffers::Offset<S_MSG> CreateS_MSG(flatbuffers::FlatBufferBuilder &_fbb,
    int16_t app_id = 0,
    int32_t session_id = 0,
    int16_t chat_type = 0,
    int32_t m_type = 0,
    int32_t s_type = 0,
    int32_t ext_type = 0,
    flatbuffers::Offset<flatbuffers::String> msg_content = 0,
    int64_t msg_time = 0,
    flatbuffers::Offset<flatbuffers::String> send_user_name = 0) {
  S_MSGBuilder builder_(_fbb);
  builder_.add_msg_time(msg_time);
  builder_.add_send_user_name(send_user_name);
  builder_.add_msg_content(msg_content);
  builder_.add_ext_type(ext_type);
  builder_.add_s_type(s_type);
  builder_.add_m_type(m_type);
  builder_.add_session_id(session_id);
  builder_.add_chat_type(chat_type);
  builder_.add_app_id(app_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<S_MSG> CreateS_MSGDirect(flatbuffers::FlatBufferBuilder &_fbb,
    int16_t app_id = 0,
    int32_t session_id = 0,
    int16_t chat_type = 0,
    int32_t m_type = 0,
    int32_t s_type = 0,
    int32_t ext_type = 0,
    const char *msg_content = nullptr,
    int64_t msg_time = 0,
    const char *send_user_name = nullptr) {
  return CreateS_MSG(_fbb, app_id, session_id, chat_type, m_type, s_type, ext_type, msg_content ? _fbb.CreateString(msg_content) : 0, msg_time, send_user_name ? _fbb.CreateString(send_user_name) : 0);
}

struct USER_BASE_INFO FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_USER_ID = 4,
    VT_USER_NICK_NAME = 6,
    VT_USER_GROUP_INDEX = 8
  };
  uint64_t user_id() const { return GetField<uint64_t>(VT_USER_ID, 0); }
  const flatbuffers::String *user_nick_name() const { return GetPointer<const flatbuffers::String *>(VT_USER_NICK_NAME); }
  int32_t user_group_index() const { return GetField<int32_t>(VT_USER_GROUP_INDEX, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_USER_ID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_USER_NICK_NAME) &&
           verifier.Verify(user_nick_name()) &&
           VerifyField<int32_t>(verifier, VT_USER_GROUP_INDEX) &&
           verifier.EndTable();
  }
};

struct USER_BASE_INFOBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_user_id(uint64_t user_id) { fbb_.AddElement<uint64_t>(USER_BASE_INFO::VT_USER_ID, user_id, 0); }
  void add_user_nick_name(flatbuffers::Offset<flatbuffers::String> user_nick_name) { fbb_.AddOffset(USER_BASE_INFO::VT_USER_NICK_NAME, user_nick_name); }
  void add_user_group_index(int32_t user_group_index) { fbb_.AddElement<int32_t>(USER_BASE_INFO::VT_USER_GROUP_INDEX, user_group_index, 0); }
  USER_BASE_INFOBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  USER_BASE_INFOBuilder &operator=(const USER_BASE_INFOBuilder &);
  flatbuffers::Offset<USER_BASE_INFO> Finish() {
    auto o = flatbuffers::Offset<USER_BASE_INFO>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<USER_BASE_INFO> CreateUSER_BASE_INFO(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t user_id = 0,
    flatbuffers::Offset<flatbuffers::String> user_nick_name = 0,
    int32_t user_group_index = 0) {
  USER_BASE_INFOBuilder builder_(_fbb);
  builder_.add_user_id(user_id);
  builder_.add_user_group_index(user_group_index);
  builder_.add_user_nick_name(user_nick_name);
  return builder_.Finish();
}

inline flatbuffers::Offset<USER_BASE_INFO> CreateUSER_BASE_INFODirect(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t user_id = 0,
    const char *user_nick_name = nullptr,
    int32_t user_group_index = 0) {
  return CreateUSER_BASE_INFO(_fbb, user_id, user_nick_name ? _fbb.CreateString(user_nick_name) : 0, user_group_index);
}

struct ACCOUNT_INFO FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ACCOUNT_TYPE = 4,
    VT_TARGET_USER_ID = 6,
    VT_TARGET_USER_TOKEN = 8,
    VT_TARGET_USER_NAME = 10
  };
  uint64_t account_type() const { return GetField<uint64_t>(VT_ACCOUNT_TYPE, 0); }
  uint64_t target_user_id() const { return GetField<uint64_t>(VT_TARGET_USER_ID, 0); }
  const flatbuffers::String *target_user_token() const { return GetPointer<const flatbuffers::String *>(VT_TARGET_USER_TOKEN); }
  const flatbuffers::String *target_user_name() const { return GetPointer<const flatbuffers::String *>(VT_TARGET_USER_NAME); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ACCOUNT_TYPE) &&
           VerifyField<uint64_t>(verifier, VT_TARGET_USER_ID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TARGET_USER_TOKEN) &&
           verifier.Verify(target_user_token()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TARGET_USER_NAME) &&
           verifier.Verify(target_user_name()) &&
           verifier.EndTable();
  }
};

struct ACCOUNT_INFOBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_account_type(uint64_t account_type) { fbb_.AddElement<uint64_t>(ACCOUNT_INFO::VT_ACCOUNT_TYPE, account_type, 0); }
  void add_target_user_id(uint64_t target_user_id) { fbb_.AddElement<uint64_t>(ACCOUNT_INFO::VT_TARGET_USER_ID, target_user_id, 0); }
  void add_target_user_token(flatbuffers::Offset<flatbuffers::String> target_user_token) { fbb_.AddOffset(ACCOUNT_INFO::VT_TARGET_USER_TOKEN, target_user_token); }
  void add_target_user_name(flatbuffers::Offset<flatbuffers::String> target_user_name) { fbb_.AddOffset(ACCOUNT_INFO::VT_TARGET_USER_NAME, target_user_name); }
  ACCOUNT_INFOBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ACCOUNT_INFOBuilder &operator=(const ACCOUNT_INFOBuilder &);
  flatbuffers::Offset<ACCOUNT_INFO> Finish() {
    auto o = flatbuffers::Offset<ACCOUNT_INFO>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<ACCOUNT_INFO> CreateACCOUNT_INFO(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t account_type = 0,
    uint64_t target_user_id = 0,
    flatbuffers::Offset<flatbuffers::String> target_user_token = 0,
    flatbuffers::Offset<flatbuffers::String> target_user_name = 0) {
  ACCOUNT_INFOBuilder builder_(_fbb);
  builder_.add_target_user_id(target_user_id);
  builder_.add_account_type(account_type);
  builder_.add_target_user_name(target_user_name);
  builder_.add_target_user_token(target_user_token);
  return builder_.Finish();
}

inline flatbuffers::Offset<ACCOUNT_INFO> CreateACCOUNT_INFODirect(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t account_type = 0,
    uint64_t target_user_id = 0,
    const char *target_user_token = nullptr,
    const char *target_user_name = nullptr) {
  return CreateACCOUNT_INFO(_fbb, account_type, target_user_id, target_user_token ? _fbb.CreateString(target_user_token) : 0, target_user_name ? _fbb.CreateString(target_user_name) : 0);
}

}  // namespace commonpack

#endif  // FLATBUFFERS_GENERATED_COMMON_COMMONPACK_H_
