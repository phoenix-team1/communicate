// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBECGETOFFLINECNTRS_ECPACK_H_
#define FLATBUFFERS_GENERATED_FBECGETOFFLINECNTRS_ECPACK_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"
#include "fb_ec_offlinecnt_info_generated.h"

namespace ecpack {

struct T_EC_GET_OFFLINE_CNT_RS;

struct T_EC_GET_OFFLINE_CNT_RS FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_S_RS_HEAD = 4,
    VT_BID_WITHCNT_LIST = 6
  };
  const commonpack::S_RS_HEAD *s_rs_head() const { return GetStruct<const commonpack::S_RS_HEAD *>(VT_S_RS_HEAD); }
  const flatbuffers::Vector<flatbuffers::Offset<ecpack::T_ECOFFLINECNT_INFO>> *bid_withcnt_list() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ecpack::T_ECOFFLINECNT_INFO>> *>(VT_BID_WITHCNT_LIST); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<commonpack::S_RS_HEAD>(verifier, VT_S_RS_HEAD) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_BID_WITHCNT_LIST) &&
           verifier.Verify(bid_withcnt_list()) &&
           verifier.VerifyVectorOfTables(bid_withcnt_list()) &&
           verifier.EndTable();
  }
};

struct T_EC_GET_OFFLINE_CNT_RSBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_s_rs_head(const commonpack::S_RS_HEAD *s_rs_head) { fbb_.AddStruct(T_EC_GET_OFFLINE_CNT_RS::VT_S_RS_HEAD, s_rs_head); }
  void add_bid_withcnt_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ecpack::T_ECOFFLINECNT_INFO>>> bid_withcnt_list) { fbb_.AddOffset(T_EC_GET_OFFLINE_CNT_RS::VT_BID_WITHCNT_LIST, bid_withcnt_list); }
  T_EC_GET_OFFLINE_CNT_RSBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_EC_GET_OFFLINE_CNT_RSBuilder &operator=(const T_EC_GET_OFFLINE_CNT_RSBuilder &);
  flatbuffers::Offset<T_EC_GET_OFFLINE_CNT_RS> Finish() {
    auto o = flatbuffers::Offset<T_EC_GET_OFFLINE_CNT_RS>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<T_EC_GET_OFFLINE_CNT_RS> CreateT_EC_GET_OFFLINE_CNT_RS(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RS_HEAD *s_rs_head = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ecpack::T_ECOFFLINECNT_INFO>>> bid_withcnt_list = 0) {
  T_EC_GET_OFFLINE_CNT_RSBuilder builder_(_fbb);
  builder_.add_bid_withcnt_list(bid_withcnt_list);
  builder_.add_s_rs_head(s_rs_head);
  return builder_.Finish();
}

inline flatbuffers::Offset<T_EC_GET_OFFLINE_CNT_RS> CreateT_EC_GET_OFFLINE_CNT_RSDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RS_HEAD *s_rs_head = 0,
    const std::vector<flatbuffers::Offset<ecpack::T_ECOFFLINECNT_INFO>> *bid_withcnt_list = nullptr) {
  return CreateT_EC_GET_OFFLINE_CNT_RS(_fbb, s_rs_head, bid_withcnt_list ? _fbb.CreateVector<flatbuffers::Offset<ecpack::T_ECOFFLINECNT_INFO>>(*bid_withcnt_list) : 0);
}

inline const ecpack::T_EC_GET_OFFLINE_CNT_RS *GetT_EC_GET_OFFLINE_CNT_RS(const void *buf) {
  return flatbuffers::GetRoot<ecpack::T_EC_GET_OFFLINE_CNT_RS>(buf);
}

inline bool VerifyT_EC_GET_OFFLINE_CNT_RSBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ecpack::T_EC_GET_OFFLINE_CNT_RS>(nullptr);
}

inline void FinishT_EC_GET_OFFLINE_CNT_RSBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<ecpack::T_EC_GET_OFFLINE_CNT_RS> root) {
  fbb.Finish(root);
}

}  // namespace ecpack

#endif  // FLATBUFFERS_GENERATED_FBECGETOFFLINECNTRS_ECPACK_H_
