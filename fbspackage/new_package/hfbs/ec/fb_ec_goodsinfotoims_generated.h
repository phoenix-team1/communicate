// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBECGOODSINFOTOIMS_ECPACK_H_
#define FLATBUFFERS_GENERATED_FBECGOODSINFOTOIMS_ECPACK_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace ecpack {

struct T_GOODSINFTOIMS;

struct T_GOODSINFTOIMS FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_GOODSID = 4,
    VT_GOODSNUM = 6,
    VT_SKUID = 8,
    VT_UNITPRICE = 10,
    VT_GOODSNAME = 12,
    VT_SKUTEXT = 14,
    VT_IMGURL = 16
  };
  uint64_t goodsId() const { return GetField<uint64_t>(VT_GOODSID, 0); }
  int32_t goodsNum() const { return GetField<int32_t>(VT_GOODSNUM, 0); }
  uint64_t skuId() const { return GetField<uint64_t>(VT_SKUID, 0); }
  int32_t unitPrice() const { return GetField<int32_t>(VT_UNITPRICE, 0); }
  const flatbuffers::String *goodsName() const { return GetPointer<const flatbuffers::String *>(VT_GOODSNAME); }
  const flatbuffers::String *skuText() const { return GetPointer<const flatbuffers::String *>(VT_SKUTEXT); }
  const flatbuffers::String *imgUrl() const { return GetPointer<const flatbuffers::String *>(VT_IMGURL); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_GOODSID) &&
           VerifyField<int32_t>(verifier, VT_GOODSNUM) &&
           VerifyField<uint64_t>(verifier, VT_SKUID) &&
           VerifyField<int32_t>(verifier, VT_UNITPRICE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_GOODSNAME) &&
           verifier.Verify(goodsName()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_SKUTEXT) &&
           verifier.Verify(skuText()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_IMGURL) &&
           verifier.Verify(imgUrl()) &&
           verifier.EndTable();
  }
};

struct T_GOODSINFTOIMSBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_goodsId(uint64_t goodsId) { fbb_.AddElement<uint64_t>(T_GOODSINFTOIMS::VT_GOODSID, goodsId, 0); }
  void add_goodsNum(int32_t goodsNum) { fbb_.AddElement<int32_t>(T_GOODSINFTOIMS::VT_GOODSNUM, goodsNum, 0); }
  void add_skuId(uint64_t skuId) { fbb_.AddElement<uint64_t>(T_GOODSINFTOIMS::VT_SKUID, skuId, 0); }
  void add_unitPrice(int32_t unitPrice) { fbb_.AddElement<int32_t>(T_GOODSINFTOIMS::VT_UNITPRICE, unitPrice, 0); }
  void add_goodsName(flatbuffers::Offset<flatbuffers::String> goodsName) { fbb_.AddOffset(T_GOODSINFTOIMS::VT_GOODSNAME, goodsName); }
  void add_skuText(flatbuffers::Offset<flatbuffers::String> skuText) { fbb_.AddOffset(T_GOODSINFTOIMS::VT_SKUTEXT, skuText); }
  void add_imgUrl(flatbuffers::Offset<flatbuffers::String> imgUrl) { fbb_.AddOffset(T_GOODSINFTOIMS::VT_IMGURL, imgUrl); }
  T_GOODSINFTOIMSBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_GOODSINFTOIMSBuilder &operator=(const T_GOODSINFTOIMSBuilder &);
  flatbuffers::Offset<T_GOODSINFTOIMS> Finish() {
    auto o = flatbuffers::Offset<T_GOODSINFTOIMS>(fbb_.EndTable(start_, 7));
    return o;
  }
};

inline flatbuffers::Offset<T_GOODSINFTOIMS> CreateT_GOODSINFTOIMS(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t goodsId = 0,
    int32_t goodsNum = 0,
    uint64_t skuId = 0,
    int32_t unitPrice = 0,
    flatbuffers::Offset<flatbuffers::String> goodsName = 0,
    flatbuffers::Offset<flatbuffers::String> skuText = 0,
    flatbuffers::Offset<flatbuffers::String> imgUrl = 0) {
  T_GOODSINFTOIMSBuilder builder_(_fbb);
  builder_.add_skuId(skuId);
  builder_.add_goodsId(goodsId);
  builder_.add_imgUrl(imgUrl);
  builder_.add_skuText(skuText);
  builder_.add_goodsName(goodsName);
  builder_.add_unitPrice(unitPrice);
  builder_.add_goodsNum(goodsNum);
  return builder_.Finish();
}

inline flatbuffers::Offset<T_GOODSINFTOIMS> CreateT_GOODSINFTOIMSDirect(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t goodsId = 0,
    int32_t goodsNum = 0,
    uint64_t skuId = 0,
    int32_t unitPrice = 0,
    const char *goodsName = nullptr,
    const char *skuText = nullptr,
    const char *imgUrl = nullptr) {
  return CreateT_GOODSINFTOIMS(_fbb, goodsId, goodsNum, skuId, unitPrice, goodsName ? _fbb.CreateString(goodsName) : 0, skuText ? _fbb.CreateString(skuText) : 0, imgUrl ? _fbb.CreateString(imgUrl) : 0);
}

inline const ecpack::T_GOODSINFTOIMS *GetT_GOODSINFTOIMS(const void *buf) {
  return flatbuffers::GetRoot<ecpack::T_GOODSINFTOIMS>(buf);
}

inline bool VerifyT_GOODSINFTOIMSBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ecpack::T_GOODSINFTOIMS>(nullptr);
}

inline void FinishT_GOODSINFTOIMSBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<ecpack::T_GOODSINFTOIMS> root) {
  fbb.Finish(root);
}

}  // namespace ecpack

#endif  // FLATBUFFERS_GENERATED_FBECGOODSINFOTOIMS_ECPACK_H_
