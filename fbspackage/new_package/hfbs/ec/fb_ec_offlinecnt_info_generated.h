// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBECOFFLINECNTINFO_ECPACK_H_
#define FLATBUFFERS_GENERATED_FBECOFFLINECNTINFO_ECPACK_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace ecpack {

struct T_ECOFFLINECNT_INFO;

struct T_ECOFFLINECNT_INFO FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_B_ID = 4,
    VT_CNT = 6
  };
  uint64_t b_id() const { return GetField<uint64_t>(VT_B_ID, 0); }
  uint32_t cnt() const { return GetField<uint32_t>(VT_CNT, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_B_ID) &&
           VerifyField<uint32_t>(verifier, VT_CNT) &&
           verifier.EndTable();
  }
};

struct T_ECOFFLINECNT_INFOBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_b_id(uint64_t b_id) { fbb_.AddElement<uint64_t>(T_ECOFFLINECNT_INFO::VT_B_ID, b_id, 0); }
  void add_cnt(uint32_t cnt) { fbb_.AddElement<uint32_t>(T_ECOFFLINECNT_INFO::VT_CNT, cnt, 0); }
  T_ECOFFLINECNT_INFOBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_ECOFFLINECNT_INFOBuilder &operator=(const T_ECOFFLINECNT_INFOBuilder &);
  flatbuffers::Offset<T_ECOFFLINECNT_INFO> Finish() {
    auto o = flatbuffers::Offset<T_ECOFFLINECNT_INFO>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<T_ECOFFLINECNT_INFO> CreateT_ECOFFLINECNT_INFO(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t b_id = 0,
    uint32_t cnt = 0) {
  T_ECOFFLINECNT_INFOBuilder builder_(_fbb);
  builder_.add_b_id(b_id);
  builder_.add_cnt(cnt);
  return builder_.Finish();
}

inline const ecpack::T_ECOFFLINECNT_INFO *GetT_ECOFFLINECNT_INFO(const void *buf) {
  return flatbuffers::GetRoot<ecpack::T_ECOFFLINECNT_INFO>(buf);
}

inline bool VerifyT_ECOFFLINECNT_INFOBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ecpack::T_ECOFFLINECNT_INFO>(nullptr);
}

inline void FinishT_ECOFFLINECNT_INFOBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<ecpack::T_ECOFFLINECNT_INFO> root) {
  fbb.Finish(root);
}

}  // namespace ecpack

#endif  // FLATBUFFERS_GENERATED_FBECOFFLINECNTINFO_ECPACK_H_
