// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBECORDERINFO_ECPACK_H_
#define FLATBUFFERS_GENERATED_FBECORDERINFO_ECPACK_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"
#include "fb_ec_goodsinfotoims_generated.h"

namespace ecpack {

struct T_ORDER_INFO;

struct T_ORDER_INFO FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_BUYERID = 4,
    VT_ORDERID = 6,
    VT_PAYTIME = 8,
    VT_SELLERID = 10,
    VT_TOTALAMOUNT = 12,
    VT_ORDERSTATE = 14,
    VT_ORDERSTATESTR = 16,
    VT_GOODSINFODTO4IMS = 18
  };
  uint64_t buyerId() const { return GetField<uint64_t>(VT_BUYERID, 0); }
  uint64_t orderId() const { return GetField<uint64_t>(VT_ORDERID, 0); }
  uint64_t payTime() const { return GetField<uint64_t>(VT_PAYTIME, 0); }
  uint64_t sellerId() const { return GetField<uint64_t>(VT_SELLERID, 0); }
  uint64_t totalAmount() const { return GetField<uint64_t>(VT_TOTALAMOUNT, 0); }
  int32_t orderstate() const { return GetField<int32_t>(VT_ORDERSTATE, 0); }
  const flatbuffers::String *orderstatestr() const { return GetPointer<const flatbuffers::String *>(VT_ORDERSTATESTR); }
  const flatbuffers::Vector<flatbuffers::Offset<ecpack::T_GOODSINFTOIMS>> *goodsInfoDto4IMs() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ecpack::T_GOODSINFTOIMS>> *>(VT_GOODSINFODTO4IMS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_BUYERID) &&
           VerifyField<uint64_t>(verifier, VT_ORDERID) &&
           VerifyField<uint64_t>(verifier, VT_PAYTIME) &&
           VerifyField<uint64_t>(verifier, VT_SELLERID) &&
           VerifyField<uint64_t>(verifier, VT_TOTALAMOUNT) &&
           VerifyField<int32_t>(verifier, VT_ORDERSTATE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ORDERSTATESTR) &&
           verifier.Verify(orderstatestr()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_GOODSINFODTO4IMS) &&
           verifier.Verify(goodsInfoDto4IMs()) &&
           verifier.VerifyVectorOfTables(goodsInfoDto4IMs()) &&
           verifier.EndTable();
  }
};

struct T_ORDER_INFOBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_buyerId(uint64_t buyerId) { fbb_.AddElement<uint64_t>(T_ORDER_INFO::VT_BUYERID, buyerId, 0); }
  void add_orderId(uint64_t orderId) { fbb_.AddElement<uint64_t>(T_ORDER_INFO::VT_ORDERID, orderId, 0); }
  void add_payTime(uint64_t payTime) { fbb_.AddElement<uint64_t>(T_ORDER_INFO::VT_PAYTIME, payTime, 0); }
  void add_sellerId(uint64_t sellerId) { fbb_.AddElement<uint64_t>(T_ORDER_INFO::VT_SELLERID, sellerId, 0); }
  void add_totalAmount(uint64_t totalAmount) { fbb_.AddElement<uint64_t>(T_ORDER_INFO::VT_TOTALAMOUNT, totalAmount, 0); }
  void add_orderstate(int32_t orderstate) { fbb_.AddElement<int32_t>(T_ORDER_INFO::VT_ORDERSTATE, orderstate, 0); }
  void add_orderstatestr(flatbuffers::Offset<flatbuffers::String> orderstatestr) { fbb_.AddOffset(T_ORDER_INFO::VT_ORDERSTATESTR, orderstatestr); }
  void add_goodsInfoDto4IMs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ecpack::T_GOODSINFTOIMS>>> goodsInfoDto4IMs) { fbb_.AddOffset(T_ORDER_INFO::VT_GOODSINFODTO4IMS, goodsInfoDto4IMs); }
  T_ORDER_INFOBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_ORDER_INFOBuilder &operator=(const T_ORDER_INFOBuilder &);
  flatbuffers::Offset<T_ORDER_INFO> Finish() {
    auto o = flatbuffers::Offset<T_ORDER_INFO>(fbb_.EndTable(start_, 8));
    return o;
  }
};

inline flatbuffers::Offset<T_ORDER_INFO> CreateT_ORDER_INFO(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t buyerId = 0,
    uint64_t orderId = 0,
    uint64_t payTime = 0,
    uint64_t sellerId = 0,
    uint64_t totalAmount = 0,
    int32_t orderstate = 0,
    flatbuffers::Offset<flatbuffers::String> orderstatestr = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ecpack::T_GOODSINFTOIMS>>> goodsInfoDto4IMs = 0) {
  T_ORDER_INFOBuilder builder_(_fbb);
  builder_.add_totalAmount(totalAmount);
  builder_.add_sellerId(sellerId);
  builder_.add_payTime(payTime);
  builder_.add_orderId(orderId);
  builder_.add_buyerId(buyerId);
  builder_.add_goodsInfoDto4IMs(goodsInfoDto4IMs);
  builder_.add_orderstatestr(orderstatestr);
  builder_.add_orderstate(orderstate);
  return builder_.Finish();
}

inline flatbuffers::Offset<T_ORDER_INFO> CreateT_ORDER_INFODirect(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t buyerId = 0,
    uint64_t orderId = 0,
    uint64_t payTime = 0,
    uint64_t sellerId = 0,
    uint64_t totalAmount = 0,
    int32_t orderstate = 0,
    const char *orderstatestr = nullptr,
    const std::vector<flatbuffers::Offset<ecpack::T_GOODSINFTOIMS>> *goodsInfoDto4IMs = nullptr) {
  return CreateT_ORDER_INFO(_fbb, buyerId, orderId, payTime, sellerId, totalAmount, orderstate, orderstatestr ? _fbb.CreateString(orderstatestr) : 0, goodsInfoDto4IMs ? _fbb.CreateVector<flatbuffers::Offset<ecpack::T_GOODSINFTOIMS>>(*goodsInfoDto4IMs) : 0);
}

inline const ecpack::T_ORDER_INFO *GetT_ORDER_INFO(const void *buf) {
  return flatbuffers::GetRoot<ecpack::T_ORDER_INFO>(buf);
}

inline bool VerifyT_ORDER_INFOBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ecpack::T_ORDER_INFO>(nullptr);
}

inline void FinishT_ORDER_INFOBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<ecpack::T_ORDER_INFO> root) {
  fbb.Finish(root);
}

}  // namespace ecpack

#endif  // FLATBUFFERS_GENERATED_FBECORDERINFO_ECPACK_H_
