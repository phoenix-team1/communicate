// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBECPROMPTMSGINFO_ECPACK_H_
#define FLATBUFFERS_GENERATED_FBECPROMPTMSGINFO_ECPACK_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace ecpack {

struct T_PROMPTMSG_INFO;

struct T_PROMPTMSG_INFO FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_B_ID = 4,
    VT_PROMPTS_TYPE = 6,
    VT_PROMPTS_MSG = 8
  };
  uint64_t b_id() const { return GetField<uint64_t>(VT_B_ID, 0); }
  int32_t prompts_type() const { return GetField<int32_t>(VT_PROMPTS_TYPE, 0); }
  const flatbuffers::String *prompts_msg() const { return GetPointer<const flatbuffers::String *>(VT_PROMPTS_MSG); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_B_ID) &&
           VerifyField<int32_t>(verifier, VT_PROMPTS_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_PROMPTS_MSG) &&
           verifier.Verify(prompts_msg()) &&
           verifier.EndTable();
  }
};

struct T_PROMPTMSG_INFOBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_b_id(uint64_t b_id) { fbb_.AddElement<uint64_t>(T_PROMPTMSG_INFO::VT_B_ID, b_id, 0); }
  void add_prompts_type(int32_t prompts_type) { fbb_.AddElement<int32_t>(T_PROMPTMSG_INFO::VT_PROMPTS_TYPE, prompts_type, 0); }
  void add_prompts_msg(flatbuffers::Offset<flatbuffers::String> prompts_msg) { fbb_.AddOffset(T_PROMPTMSG_INFO::VT_PROMPTS_MSG, prompts_msg); }
  T_PROMPTMSG_INFOBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_PROMPTMSG_INFOBuilder &operator=(const T_PROMPTMSG_INFOBuilder &);
  flatbuffers::Offset<T_PROMPTMSG_INFO> Finish() {
    auto o = flatbuffers::Offset<T_PROMPTMSG_INFO>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<T_PROMPTMSG_INFO> CreateT_PROMPTMSG_INFO(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t b_id = 0,
    int32_t prompts_type = 0,
    flatbuffers::Offset<flatbuffers::String> prompts_msg = 0) {
  T_PROMPTMSG_INFOBuilder builder_(_fbb);
  builder_.add_b_id(b_id);
  builder_.add_prompts_msg(prompts_msg);
  builder_.add_prompts_type(prompts_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<T_PROMPTMSG_INFO> CreateT_PROMPTMSG_INFODirect(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t b_id = 0,
    int32_t prompts_type = 0,
    const char *prompts_msg = nullptr) {
  return CreateT_PROMPTMSG_INFO(_fbb, b_id, prompts_type, prompts_msg ? _fbb.CreateString(prompts_msg) : 0);
}

inline const ecpack::T_PROMPTMSG_INFO *GetT_PROMPTMSG_INFO(const void *buf) {
  return flatbuffers::GetRoot<ecpack::T_PROMPTMSG_INFO>(buf);
}

inline bool VerifyT_PROMPTMSG_INFOBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ecpack::T_PROMPTMSG_INFO>(nullptr);
}

inline void FinishT_PROMPTMSG_INFOBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<ecpack::T_PROMPTMSG_INFO> root) {
  fbb.Finish(root);
}

}  // namespace ecpack

#endif  // FLATBUFFERS_GENERATED_FBECPROMPTMSGINFO_ECPACK_H_
