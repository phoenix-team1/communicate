// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBFRIENDDELRQ_FRIENDPACK_H_
#define FLATBUFFERS_GENERATED_FBFRIENDDELRQ_FRIENDPACK_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace friendpack {

struct T_FRIEND_DEL_RQ;

struct T_FRIEND_DEL_RQ FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_S_RQ_HEAD = 4,
    VT_OWN_NICKNAME = 6,
    VT_PEER_USER_ID = 8
  };
  const commonpack::S_RQ_HEAD *s_rq_head() const { return GetStruct<const commonpack::S_RQ_HEAD *>(VT_S_RQ_HEAD); }
  const flatbuffers::String *own_nickname() const { return GetPointer<const flatbuffers::String *>(VT_OWN_NICKNAME); }
  uint64_t peer_user_id() const { return GetField<uint64_t>(VT_PEER_USER_ID, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<commonpack::S_RQ_HEAD>(verifier, VT_S_RQ_HEAD) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_OWN_NICKNAME) &&
           verifier.Verify(own_nickname()) &&
           VerifyField<uint64_t>(verifier, VT_PEER_USER_ID) &&
           verifier.EndTable();
  }
};

struct T_FRIEND_DEL_RQBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_s_rq_head(const commonpack::S_RQ_HEAD *s_rq_head) { fbb_.AddStruct(T_FRIEND_DEL_RQ::VT_S_RQ_HEAD, s_rq_head); }
  void add_own_nickname(flatbuffers::Offset<flatbuffers::String> own_nickname) { fbb_.AddOffset(T_FRIEND_DEL_RQ::VT_OWN_NICKNAME, own_nickname); }
  void add_peer_user_id(uint64_t peer_user_id) { fbb_.AddElement<uint64_t>(T_FRIEND_DEL_RQ::VT_PEER_USER_ID, peer_user_id, 0); }
  T_FRIEND_DEL_RQBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_FRIEND_DEL_RQBuilder &operator=(const T_FRIEND_DEL_RQBuilder &);
  flatbuffers::Offset<T_FRIEND_DEL_RQ> Finish() {
    auto o = flatbuffers::Offset<T_FRIEND_DEL_RQ>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<T_FRIEND_DEL_RQ> CreateT_FRIEND_DEL_RQ(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RQ_HEAD *s_rq_head = 0,
    flatbuffers::Offset<flatbuffers::String> own_nickname = 0,
    uint64_t peer_user_id = 0) {
  T_FRIEND_DEL_RQBuilder builder_(_fbb);
  builder_.add_peer_user_id(peer_user_id);
  builder_.add_own_nickname(own_nickname);
  builder_.add_s_rq_head(s_rq_head);
  return builder_.Finish();
}

inline flatbuffers::Offset<T_FRIEND_DEL_RQ> CreateT_FRIEND_DEL_RQDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RQ_HEAD *s_rq_head = 0,
    const char *own_nickname = nullptr,
    uint64_t peer_user_id = 0) {
  return CreateT_FRIEND_DEL_RQ(_fbb, s_rq_head, own_nickname ? _fbb.CreateString(own_nickname) : 0, peer_user_id);
}

inline const friendpack::T_FRIEND_DEL_RQ *GetT_FRIEND_DEL_RQ(const void *buf) {
  return flatbuffers::GetRoot<friendpack::T_FRIEND_DEL_RQ>(buf);
}

inline bool VerifyT_FRIEND_DEL_RQBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<friendpack::T_FRIEND_DEL_RQ>(nullptr);
}

inline void FinishT_FRIEND_DEL_RQBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<friendpack::T_FRIEND_DEL_RQ> root) {
  fbb.Finish(root);
}

}  // namespace friendpack

#endif  // FLATBUFFERS_GENERATED_FBFRIENDDELRQ_FRIENDPACK_H_
