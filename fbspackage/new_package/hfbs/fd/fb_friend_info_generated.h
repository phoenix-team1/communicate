// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBFRIENDINFO_FRIENDPACK_H_
#define FLATBUFFERS_GENERATED_FBFRIENDINFO_FRIENDPACK_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace friendpack {

struct T_FREIND_INFO;

struct T_FREIND_INFO FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_USER_ID = 4,
    VT_SOURCE_TYPE = 6,
    VT_REMARK_NAME = 8,
    VT_OP_MSG = 10,
    VT_OPT_TYPE = 12,
    VT_BLACK_TYPE = 14,
    VT_OP_TIME = 16
  };
  uint64_t user_id() const { return GetField<uint64_t>(VT_USER_ID, 0); }
  int8_t source_type() const { return GetField<int8_t>(VT_SOURCE_TYPE, 0); }
  const flatbuffers::String *remark_name() const { return GetPointer<const flatbuffers::String *>(VT_REMARK_NAME); }
  const flatbuffers::String *op_msg() const { return GetPointer<const flatbuffers::String *>(VT_OP_MSG); }
  int32_t opt_type() const { return GetField<int32_t>(VT_OPT_TYPE, 0); }
  int32_t black_type() const { return GetField<int32_t>(VT_BLACK_TYPE, 0); }
  int64_t op_time() const { return GetField<int64_t>(VT_OP_TIME, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_USER_ID) &&
           VerifyField<int8_t>(verifier, VT_SOURCE_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_REMARK_NAME) &&
           verifier.Verify(remark_name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_OP_MSG) &&
           verifier.Verify(op_msg()) &&
           VerifyField<int32_t>(verifier, VT_OPT_TYPE) &&
           VerifyField<int32_t>(verifier, VT_BLACK_TYPE) &&
           VerifyField<int64_t>(verifier, VT_OP_TIME) &&
           verifier.EndTable();
  }
};

struct T_FREIND_INFOBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_user_id(uint64_t user_id) { fbb_.AddElement<uint64_t>(T_FREIND_INFO::VT_USER_ID, user_id, 0); }
  void add_source_type(int8_t source_type) { fbb_.AddElement<int8_t>(T_FREIND_INFO::VT_SOURCE_TYPE, source_type, 0); }
  void add_remark_name(flatbuffers::Offset<flatbuffers::String> remark_name) { fbb_.AddOffset(T_FREIND_INFO::VT_REMARK_NAME, remark_name); }
  void add_op_msg(flatbuffers::Offset<flatbuffers::String> op_msg) { fbb_.AddOffset(T_FREIND_INFO::VT_OP_MSG, op_msg); }
  void add_opt_type(int32_t opt_type) { fbb_.AddElement<int32_t>(T_FREIND_INFO::VT_OPT_TYPE, opt_type, 0); }
  void add_black_type(int32_t black_type) { fbb_.AddElement<int32_t>(T_FREIND_INFO::VT_BLACK_TYPE, black_type, 0); }
  void add_op_time(int64_t op_time) { fbb_.AddElement<int64_t>(T_FREIND_INFO::VT_OP_TIME, op_time, 0); }
  T_FREIND_INFOBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_FREIND_INFOBuilder &operator=(const T_FREIND_INFOBuilder &);
  flatbuffers::Offset<T_FREIND_INFO> Finish() {
    auto o = flatbuffers::Offset<T_FREIND_INFO>(fbb_.EndTable(start_, 7));
    return o;
  }
};

inline flatbuffers::Offset<T_FREIND_INFO> CreateT_FREIND_INFO(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t user_id = 0,
    int8_t source_type = 0,
    flatbuffers::Offset<flatbuffers::String> remark_name = 0,
    flatbuffers::Offset<flatbuffers::String> op_msg = 0,
    int32_t opt_type = 0,
    int32_t black_type = 0,
    int64_t op_time = 0) {
  T_FREIND_INFOBuilder builder_(_fbb);
  builder_.add_op_time(op_time);
  builder_.add_user_id(user_id);
  builder_.add_black_type(black_type);
  builder_.add_opt_type(opt_type);
  builder_.add_op_msg(op_msg);
  builder_.add_remark_name(remark_name);
  builder_.add_source_type(source_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<T_FREIND_INFO> CreateT_FREIND_INFODirect(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t user_id = 0,
    int8_t source_type = 0,
    const char *remark_name = nullptr,
    const char *op_msg = nullptr,
    int32_t opt_type = 0,
    int32_t black_type = 0,
    int64_t op_time = 0) {
  return CreateT_FREIND_INFO(_fbb, user_id, source_type, remark_name ? _fbb.CreateString(remark_name) : 0, op_msg ? _fbb.CreateString(op_msg) : 0, opt_type, black_type, op_time);
}

inline const friendpack::T_FREIND_INFO *GetT_FREIND_INFO(const void *buf) {
  return flatbuffers::GetRoot<friendpack::T_FREIND_INFO>(buf);
}

inline bool VerifyT_FREIND_INFOBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<friendpack::T_FREIND_INFO>(nullptr);
}

inline void FinishT_FREIND_INFOBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<friendpack::T_FREIND_INFO> root) {
  fbb.Finish(root);
}

}  // namespace friendpack

#endif  // FLATBUFFERS_GENERATED_FBFRIENDINFO_FRIENDPACK_H_
