// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBFRIENDLISTRS_FRIENDPACK_H_
#define FLATBUFFERS_GENERATED_FBFRIENDLISTRS_FRIENDPACK_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"
#include "fb_friend_info_generated.h"

namespace friendpack {

struct T_FRIEND_LIST_RS;

struct T_FRIEND_LIST_RS FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_S_RS_HEAD = 4,
    VT_FRIEND_LIST = 6,
    VT_TOKEN = 8,
    VT_MSG_SOURCE = 10
  };
  const commonpack::S_RS_HEAD *s_rs_head() const { return GetStruct<const commonpack::S_RS_HEAD *>(VT_S_RS_HEAD); }
  const flatbuffers::Vector<flatbuffers::Offset<friendpack::T_FREIND_INFO>> *friend_list() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<friendpack::T_FREIND_INFO>> *>(VT_FRIEND_LIST); }
  uint64_t token() const { return GetField<uint64_t>(VT_TOKEN, 0); }
  int32_t msg_source() const { return GetField<int32_t>(VT_MSG_SOURCE, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<commonpack::S_RS_HEAD>(verifier, VT_S_RS_HEAD) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_FRIEND_LIST) &&
           verifier.Verify(friend_list()) &&
           verifier.VerifyVectorOfTables(friend_list()) &&
           VerifyField<uint64_t>(verifier, VT_TOKEN) &&
           VerifyField<int32_t>(verifier, VT_MSG_SOURCE) &&
           verifier.EndTable();
  }
};

struct T_FRIEND_LIST_RSBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_s_rs_head(const commonpack::S_RS_HEAD *s_rs_head) { fbb_.AddStruct(T_FRIEND_LIST_RS::VT_S_RS_HEAD, s_rs_head); }
  void add_friend_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<friendpack::T_FREIND_INFO>>> friend_list) { fbb_.AddOffset(T_FRIEND_LIST_RS::VT_FRIEND_LIST, friend_list); }
  void add_token(uint64_t token) { fbb_.AddElement<uint64_t>(T_FRIEND_LIST_RS::VT_TOKEN, token, 0); }
  void add_msg_source(int32_t msg_source) { fbb_.AddElement<int32_t>(T_FRIEND_LIST_RS::VT_MSG_SOURCE, msg_source, 0); }
  T_FRIEND_LIST_RSBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_FRIEND_LIST_RSBuilder &operator=(const T_FRIEND_LIST_RSBuilder &);
  flatbuffers::Offset<T_FRIEND_LIST_RS> Finish() {
    auto o = flatbuffers::Offset<T_FRIEND_LIST_RS>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<T_FRIEND_LIST_RS> CreateT_FRIEND_LIST_RS(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RS_HEAD *s_rs_head = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<friendpack::T_FREIND_INFO>>> friend_list = 0,
    uint64_t token = 0,
    int32_t msg_source = 0) {
  T_FRIEND_LIST_RSBuilder builder_(_fbb);
  builder_.add_token(token);
  builder_.add_msg_source(msg_source);
  builder_.add_friend_list(friend_list);
  builder_.add_s_rs_head(s_rs_head);
  return builder_.Finish();
}

inline flatbuffers::Offset<T_FRIEND_LIST_RS> CreateT_FRIEND_LIST_RSDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RS_HEAD *s_rs_head = 0,
    const std::vector<flatbuffers::Offset<friendpack::T_FREIND_INFO>> *friend_list = nullptr,
    uint64_t token = 0,
    int32_t msg_source = 0) {
  return CreateT_FRIEND_LIST_RS(_fbb, s_rs_head, friend_list ? _fbb.CreateVector<flatbuffers::Offset<friendpack::T_FREIND_INFO>>(*friend_list) : 0, token, msg_source);
}

inline const friendpack::T_FRIEND_LIST_RS *GetT_FRIEND_LIST_RS(const void *buf) {
  return flatbuffers::GetRoot<friendpack::T_FRIEND_LIST_RS>(buf);
}

inline bool VerifyT_FRIEND_LIST_RSBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<friendpack::T_FRIEND_LIST_RS>(nullptr);
}

inline void FinishT_FRIEND_LIST_RSBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<friendpack::T_FRIEND_LIST_RS> root) {
  fbb.Finish(root);
}

}  // namespace friendpack

#endif  // FLATBUFFERS_GENERATED_FBFRIENDLISTRS_FRIENDPACK_H_
