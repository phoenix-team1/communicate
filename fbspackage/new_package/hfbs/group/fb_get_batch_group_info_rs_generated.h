// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBGETBATCHGROUPINFORS_GROUPPACK_H_
#define FLATBUFFERS_GENERATED_FBGETBATCHGROUPINFORS_GROUPPACK_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"
#include "fb_group_info_generated.h"

namespace grouppack {

struct T_GET_BATCH_GROUP_INFO_RS;

struct T_GET_BATCH_GROUP_INFO_RS FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_S_RS_HEAD = 4,
    VT_LIST_GROUP_ID = 6,
    VT_LIST_GROUP_INFO = 8
  };
  const commonpack::S_RS_HEAD *s_rs_head() const { return GetStruct<const commonpack::S_RS_HEAD *>(VT_S_RS_HEAD); }
  const flatbuffers::Vector<uint64_t> *list_group_id() const { return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_LIST_GROUP_ID); }
  const flatbuffers::Vector<flatbuffers::Offset<grouppack::T_GROUP_BASE_INFO>> *list_group_info() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<grouppack::T_GROUP_BASE_INFO>> *>(VT_LIST_GROUP_INFO); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<commonpack::S_RS_HEAD>(verifier, VT_S_RS_HEAD) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_LIST_GROUP_ID) &&
           verifier.Verify(list_group_id()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_LIST_GROUP_INFO) &&
           verifier.Verify(list_group_info()) &&
           verifier.VerifyVectorOfTables(list_group_info()) &&
           verifier.EndTable();
  }
};

struct T_GET_BATCH_GROUP_INFO_RSBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_s_rs_head(const commonpack::S_RS_HEAD *s_rs_head) { fbb_.AddStruct(T_GET_BATCH_GROUP_INFO_RS::VT_S_RS_HEAD, s_rs_head); }
  void add_list_group_id(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> list_group_id) { fbb_.AddOffset(T_GET_BATCH_GROUP_INFO_RS::VT_LIST_GROUP_ID, list_group_id); }
  void add_list_group_info(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<grouppack::T_GROUP_BASE_INFO>>> list_group_info) { fbb_.AddOffset(T_GET_BATCH_GROUP_INFO_RS::VT_LIST_GROUP_INFO, list_group_info); }
  T_GET_BATCH_GROUP_INFO_RSBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_GET_BATCH_GROUP_INFO_RSBuilder &operator=(const T_GET_BATCH_GROUP_INFO_RSBuilder &);
  flatbuffers::Offset<T_GET_BATCH_GROUP_INFO_RS> Finish() {
    auto o = flatbuffers::Offset<T_GET_BATCH_GROUP_INFO_RS>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<T_GET_BATCH_GROUP_INFO_RS> CreateT_GET_BATCH_GROUP_INFO_RS(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RS_HEAD *s_rs_head = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> list_group_id = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<grouppack::T_GROUP_BASE_INFO>>> list_group_info = 0) {
  T_GET_BATCH_GROUP_INFO_RSBuilder builder_(_fbb);
  builder_.add_list_group_info(list_group_info);
  builder_.add_list_group_id(list_group_id);
  builder_.add_s_rs_head(s_rs_head);
  return builder_.Finish();
}

inline flatbuffers::Offset<T_GET_BATCH_GROUP_INFO_RS> CreateT_GET_BATCH_GROUP_INFO_RSDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RS_HEAD *s_rs_head = 0,
    const std::vector<uint64_t> *list_group_id = nullptr,
    const std::vector<flatbuffers::Offset<grouppack::T_GROUP_BASE_INFO>> *list_group_info = nullptr) {
  return CreateT_GET_BATCH_GROUP_INFO_RS(_fbb, s_rs_head, list_group_id ? _fbb.CreateVector<uint64_t>(*list_group_id) : 0, list_group_info ? _fbb.CreateVector<flatbuffers::Offset<grouppack::T_GROUP_BASE_INFO>>(*list_group_info) : 0);
}

inline const grouppack::T_GET_BATCH_GROUP_INFO_RS *GetT_GET_BATCH_GROUP_INFO_RS(const void *buf) {
  return flatbuffers::GetRoot<grouppack::T_GET_BATCH_GROUP_INFO_RS>(buf);
}

inline bool VerifyT_GET_BATCH_GROUP_INFO_RSBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<grouppack::T_GET_BATCH_GROUP_INFO_RS>(nullptr);
}

inline void FinishT_GET_BATCH_GROUP_INFO_RSBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<grouppack::T_GET_BATCH_GROUP_INFO_RS> root) {
  fbb.Finish(root);
}

}  // namespace grouppack

#endif  // FLATBUFFERS_GENERATED_FBGETBATCHGROUPINFORS_GROUPPACK_H_
