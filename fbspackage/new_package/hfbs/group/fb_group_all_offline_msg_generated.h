// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBGROUPALLOFFLINEMSG_GROUPPACK_H_
#define FLATBUFFERS_GENERATED_FBGROUPALLOFFLINEMSG_GROUPPACK_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"
#include "fb_group_info_generated.h"
#include "fb_group_offline_msg_generated.h"

namespace grouppack {

struct T_GROUP_ALL_OFFLINE_MSG;

struct T_GROUP_ALL_OFFLINE_MSG FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_IS_FINISH = 4,
    VT_GROUP_ID = 6,
    VT_S_OFFLINE_MSG_LIST = 8
  };
  int8_t is_finish() const { return GetField<int8_t>(VT_IS_FINISH, 0); }
  uint64_t group_id() const { return GetField<uint64_t>(VT_GROUP_ID, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<grouppack::T_OFFLINE_GROUP_MSG>> *s_offline_msg_list() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<grouppack::T_OFFLINE_GROUP_MSG>> *>(VT_S_OFFLINE_MSG_LIST); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_IS_FINISH) &&
           VerifyField<uint64_t>(verifier, VT_GROUP_ID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_S_OFFLINE_MSG_LIST) &&
           verifier.Verify(s_offline_msg_list()) &&
           verifier.VerifyVectorOfTables(s_offline_msg_list()) &&
           verifier.EndTable();
  }
};

struct T_GROUP_ALL_OFFLINE_MSGBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_is_finish(int8_t is_finish) { fbb_.AddElement<int8_t>(T_GROUP_ALL_OFFLINE_MSG::VT_IS_FINISH, is_finish, 0); }
  void add_group_id(uint64_t group_id) { fbb_.AddElement<uint64_t>(T_GROUP_ALL_OFFLINE_MSG::VT_GROUP_ID, group_id, 0); }
  void add_s_offline_msg_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<grouppack::T_OFFLINE_GROUP_MSG>>> s_offline_msg_list) { fbb_.AddOffset(T_GROUP_ALL_OFFLINE_MSG::VT_S_OFFLINE_MSG_LIST, s_offline_msg_list); }
  T_GROUP_ALL_OFFLINE_MSGBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_GROUP_ALL_OFFLINE_MSGBuilder &operator=(const T_GROUP_ALL_OFFLINE_MSGBuilder &);
  flatbuffers::Offset<T_GROUP_ALL_OFFLINE_MSG> Finish() {
    auto o = flatbuffers::Offset<T_GROUP_ALL_OFFLINE_MSG>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<T_GROUP_ALL_OFFLINE_MSG> CreateT_GROUP_ALL_OFFLINE_MSG(flatbuffers::FlatBufferBuilder &_fbb,
    int8_t is_finish = 0,
    uint64_t group_id = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<grouppack::T_OFFLINE_GROUP_MSG>>> s_offline_msg_list = 0) {
  T_GROUP_ALL_OFFLINE_MSGBuilder builder_(_fbb);
  builder_.add_group_id(group_id);
  builder_.add_s_offline_msg_list(s_offline_msg_list);
  builder_.add_is_finish(is_finish);
  return builder_.Finish();
}

inline flatbuffers::Offset<T_GROUP_ALL_OFFLINE_MSG> CreateT_GROUP_ALL_OFFLINE_MSGDirect(flatbuffers::FlatBufferBuilder &_fbb,
    int8_t is_finish = 0,
    uint64_t group_id = 0,
    const std::vector<flatbuffers::Offset<grouppack::T_OFFLINE_GROUP_MSG>> *s_offline_msg_list = nullptr) {
  return CreateT_GROUP_ALL_OFFLINE_MSG(_fbb, is_finish, group_id, s_offline_msg_list ? _fbb.CreateVector<flatbuffers::Offset<grouppack::T_OFFLINE_GROUP_MSG>>(*s_offline_msg_list) : 0);
}

inline const grouppack::T_GROUP_ALL_OFFLINE_MSG *GetT_GROUP_ALL_OFFLINE_MSG(const void *buf) {
  return flatbuffers::GetRoot<grouppack::T_GROUP_ALL_OFFLINE_MSG>(buf);
}

inline bool VerifyT_GROUP_ALL_OFFLINE_MSGBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<grouppack::T_GROUP_ALL_OFFLINE_MSG>(nullptr);
}

inline void FinishT_GROUP_ALL_OFFLINE_MSGBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<grouppack::T_GROUP_ALL_OFFLINE_MSG> root) {
  fbb.Finish(root);
}

}  // namespace grouppack

#endif  // FLATBUFFERS_GENERATED_FBGROUPALLOFFLINEMSG_GROUPPACK_H_
