// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBGROUPCHATNOTIFYRQ_GROUPPACK_H_
#define FLATBUFFERS_GENERATED_FBGROUPCHATNOTIFYRQ_GROUPPACK_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace grouppack {

struct T_GROUP_CHAT_NOTIFY_RQ;

struct T_GROUP_CHAT_NOTIFY_RQ FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_GROUP_ID = 4,
    VT_GROUP_NAME = 6
  };
  uint64_t group_id() const { return GetField<uint64_t>(VT_GROUP_ID, 0); }
  const flatbuffers::String *group_name() const { return GetPointer<const flatbuffers::String *>(VT_GROUP_NAME); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_GROUP_ID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_GROUP_NAME) &&
           verifier.Verify(group_name()) &&
           verifier.EndTable();
  }
};

struct T_GROUP_CHAT_NOTIFY_RQBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_group_id(uint64_t group_id) { fbb_.AddElement<uint64_t>(T_GROUP_CHAT_NOTIFY_RQ::VT_GROUP_ID, group_id, 0); }
  void add_group_name(flatbuffers::Offset<flatbuffers::String> group_name) { fbb_.AddOffset(T_GROUP_CHAT_NOTIFY_RQ::VT_GROUP_NAME, group_name); }
  T_GROUP_CHAT_NOTIFY_RQBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_GROUP_CHAT_NOTIFY_RQBuilder &operator=(const T_GROUP_CHAT_NOTIFY_RQBuilder &);
  flatbuffers::Offset<T_GROUP_CHAT_NOTIFY_RQ> Finish() {
    auto o = flatbuffers::Offset<T_GROUP_CHAT_NOTIFY_RQ>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<T_GROUP_CHAT_NOTIFY_RQ> CreateT_GROUP_CHAT_NOTIFY_RQ(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t group_id = 0,
    flatbuffers::Offset<flatbuffers::String> group_name = 0) {
  T_GROUP_CHAT_NOTIFY_RQBuilder builder_(_fbb);
  builder_.add_group_id(group_id);
  builder_.add_group_name(group_name);
  return builder_.Finish();
}

inline flatbuffers::Offset<T_GROUP_CHAT_NOTIFY_RQ> CreateT_GROUP_CHAT_NOTIFY_RQDirect(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t group_id = 0,
    const char *group_name = nullptr) {
  return CreateT_GROUP_CHAT_NOTIFY_RQ(_fbb, group_id, group_name ? _fbb.CreateString(group_name) : 0);
}

inline const grouppack::T_GROUP_CHAT_NOTIFY_RQ *GetT_GROUP_CHAT_NOTIFY_RQ(const void *buf) {
  return flatbuffers::GetRoot<grouppack::T_GROUP_CHAT_NOTIFY_RQ>(buf);
}

inline bool VerifyT_GROUP_CHAT_NOTIFY_RQBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<grouppack::T_GROUP_CHAT_NOTIFY_RQ>(nullptr);
}

inline void FinishT_GROUP_CHAT_NOTIFY_RQBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<grouppack::T_GROUP_CHAT_NOTIFY_RQ> root) {
  fbb.Finish(root);
}

}  // namespace grouppack

#endif  // FLATBUFFERS_GENERATED_FBGROUPCHATNOTIFYRQ_GROUPPACK_H_
