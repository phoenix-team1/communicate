// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBGROUPLISTRS_GROUPPACK_H_
#define FLATBUFFERS_GENERATED_FBGROUPLISTRS_GROUPPACK_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"
#include "fb_group_info_generated.h"

namespace grouppack {

struct T_GROUP_LIST_RS;

struct T_GROUP_LIST_RS FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_S_RS_HEAD = 4,
    VT_GROUP_INFO_LIST = 6,
    VT_GROUP_LIST_INDEX = 8
  };
  const commonpack::S_RS_HEAD *s_rs_head() const { return GetStruct<const commonpack::S_RS_HEAD *>(VT_S_RS_HEAD); }
  const flatbuffers::Vector<flatbuffers::Offset<grouppack::T_GROUP_BASE_INFO>> *group_info_list() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<grouppack::T_GROUP_BASE_INFO>> *>(VT_GROUP_INFO_LIST); }
  int32_t group_list_index() const { return GetField<int32_t>(VT_GROUP_LIST_INDEX, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<commonpack::S_RS_HEAD>(verifier, VT_S_RS_HEAD) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_GROUP_INFO_LIST) &&
           verifier.Verify(group_info_list()) &&
           verifier.VerifyVectorOfTables(group_info_list()) &&
           VerifyField<int32_t>(verifier, VT_GROUP_LIST_INDEX) &&
           verifier.EndTable();
  }
};

struct T_GROUP_LIST_RSBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_s_rs_head(const commonpack::S_RS_HEAD *s_rs_head) { fbb_.AddStruct(T_GROUP_LIST_RS::VT_S_RS_HEAD, s_rs_head); }
  void add_group_info_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<grouppack::T_GROUP_BASE_INFO>>> group_info_list) { fbb_.AddOffset(T_GROUP_LIST_RS::VT_GROUP_INFO_LIST, group_info_list); }
  void add_group_list_index(int32_t group_list_index) { fbb_.AddElement<int32_t>(T_GROUP_LIST_RS::VT_GROUP_LIST_INDEX, group_list_index, 0); }
  T_GROUP_LIST_RSBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_GROUP_LIST_RSBuilder &operator=(const T_GROUP_LIST_RSBuilder &);
  flatbuffers::Offset<T_GROUP_LIST_RS> Finish() {
    auto o = flatbuffers::Offset<T_GROUP_LIST_RS>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<T_GROUP_LIST_RS> CreateT_GROUP_LIST_RS(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RS_HEAD *s_rs_head = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<grouppack::T_GROUP_BASE_INFO>>> group_info_list = 0,
    int32_t group_list_index = 0) {
  T_GROUP_LIST_RSBuilder builder_(_fbb);
  builder_.add_group_list_index(group_list_index);
  builder_.add_group_info_list(group_info_list);
  builder_.add_s_rs_head(s_rs_head);
  return builder_.Finish();
}

inline flatbuffers::Offset<T_GROUP_LIST_RS> CreateT_GROUP_LIST_RSDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RS_HEAD *s_rs_head = 0,
    const std::vector<flatbuffers::Offset<grouppack::T_GROUP_BASE_INFO>> *group_info_list = nullptr,
    int32_t group_list_index = 0) {
  return CreateT_GROUP_LIST_RS(_fbb, s_rs_head, group_info_list ? _fbb.CreateVector<flatbuffers::Offset<grouppack::T_GROUP_BASE_INFO>>(*group_info_list) : 0, group_list_index);
}

inline const grouppack::T_GROUP_LIST_RS *GetT_GROUP_LIST_RS(const void *buf) {
  return flatbuffers::GetRoot<grouppack::T_GROUP_LIST_RS>(buf);
}

inline bool VerifyT_GROUP_LIST_RSBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<grouppack::T_GROUP_LIST_RS>(nullptr);
}

inline void FinishT_GROUP_LIST_RSBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<grouppack::T_GROUP_LIST_RS> root) {
  fbb.Finish(root);
}

}  // namespace grouppack

#endif  // FLATBUFFERS_GENERATED_FBGROUPLISTRS_GROUPPACK_H_
