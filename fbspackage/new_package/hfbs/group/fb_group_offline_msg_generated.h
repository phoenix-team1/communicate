// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBGROUPOFFLINEMSG_GROUPPACK_H_
#define FLATBUFFERS_GENERATED_FBGROUPOFFLINEMSG_GROUPPACK_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"
#include "fb_group_info_generated.h"

namespace grouppack {

struct T_OPERATE_GROUP_MSG;

struct T_OFFLINE_GROUP_MSG;

struct T_OPERATE_GROUP_MSG FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_MSG_TIME = 4,
    VT_OPERATE_USER_NAME = 6,
    VT_USER_INFO_LIST = 8,
    VT_GROUP_MODIFY_CONTENT = 10
  };
  uint64_t msg_time() const { return GetField<uint64_t>(VT_MSG_TIME, 0); }
  const flatbuffers::String *operate_user_name() const { return GetPointer<const flatbuffers::String *>(VT_OPERATE_USER_NAME); }
  const flatbuffers::Vector<flatbuffers::Offset<commonpack::USER_BASE_INFO>> *user_info_list() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<commonpack::USER_BASE_INFO>> *>(VT_USER_INFO_LIST); }
  const flatbuffers::String *group_modify_content() const { return GetPointer<const flatbuffers::String *>(VT_GROUP_MODIFY_CONTENT); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_MSG_TIME) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_OPERATE_USER_NAME) &&
           verifier.Verify(operate_user_name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_USER_INFO_LIST) &&
           verifier.Verify(user_info_list()) &&
           verifier.VerifyVectorOfTables(user_info_list()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_GROUP_MODIFY_CONTENT) &&
           verifier.Verify(group_modify_content()) &&
           verifier.EndTable();
  }
};

struct T_OPERATE_GROUP_MSGBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_msg_time(uint64_t msg_time) { fbb_.AddElement<uint64_t>(T_OPERATE_GROUP_MSG::VT_MSG_TIME, msg_time, 0); }
  void add_operate_user_name(flatbuffers::Offset<flatbuffers::String> operate_user_name) { fbb_.AddOffset(T_OPERATE_GROUP_MSG::VT_OPERATE_USER_NAME, operate_user_name); }
  void add_user_info_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<commonpack::USER_BASE_INFO>>> user_info_list) { fbb_.AddOffset(T_OPERATE_GROUP_MSG::VT_USER_INFO_LIST, user_info_list); }
  void add_group_modify_content(flatbuffers::Offset<flatbuffers::String> group_modify_content) { fbb_.AddOffset(T_OPERATE_GROUP_MSG::VT_GROUP_MODIFY_CONTENT, group_modify_content); }
  T_OPERATE_GROUP_MSGBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_OPERATE_GROUP_MSGBuilder &operator=(const T_OPERATE_GROUP_MSGBuilder &);
  flatbuffers::Offset<T_OPERATE_GROUP_MSG> Finish() {
    auto o = flatbuffers::Offset<T_OPERATE_GROUP_MSG>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<T_OPERATE_GROUP_MSG> CreateT_OPERATE_GROUP_MSG(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t msg_time = 0,
    flatbuffers::Offset<flatbuffers::String> operate_user_name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<commonpack::USER_BASE_INFO>>> user_info_list = 0,
    flatbuffers::Offset<flatbuffers::String> group_modify_content = 0) {
  T_OPERATE_GROUP_MSGBuilder builder_(_fbb);
  builder_.add_msg_time(msg_time);
  builder_.add_group_modify_content(group_modify_content);
  builder_.add_user_info_list(user_info_list);
  builder_.add_operate_user_name(operate_user_name);
  return builder_.Finish();
}

inline flatbuffers::Offset<T_OPERATE_GROUP_MSG> CreateT_OPERATE_GROUP_MSGDirect(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t msg_time = 0,
    const char *operate_user_name = nullptr,
    const std::vector<flatbuffers::Offset<commonpack::USER_BASE_INFO>> *user_info_list = nullptr,
    const char *group_modify_content = nullptr) {
  return CreateT_OPERATE_GROUP_MSG(_fbb, msg_time, operate_user_name ? _fbb.CreateString(operate_user_name) : 0, user_info_list ? _fbb.CreateVector<flatbuffers::Offset<commonpack::USER_BASE_INFO>>(*user_info_list) : 0, group_modify_content ? _fbb.CreateString(group_modify_content) : 0);
}

struct T_OFFLINE_GROUP_MSG FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_USER_ID = 4,
    VT_MESSAGE_ID = 6,
    VT_S_MSG = 8,
    VT_BIG_MSG_TYPE = 10,
    VT_OPERATE_GROUP_MSG = 12,
    VT_MESSAGE_OLD_ID = 14,
    VT_GROUP_INFO = 16
  };
  uint64_t user_id() const { return GetField<uint64_t>(VT_USER_ID, 0); }
  uint64_t message_id() const { return GetField<uint64_t>(VT_MESSAGE_ID, 0); }
  const commonpack::S_MSG *s_msg() const { return GetPointer<const commonpack::S_MSG *>(VT_S_MSG); }
  int32_t big_msg_type() const { return GetField<int32_t>(VT_BIG_MSG_TYPE, 0); }
  const T_OPERATE_GROUP_MSG *operate_group_msg() const { return GetPointer<const T_OPERATE_GROUP_MSG *>(VT_OPERATE_GROUP_MSG); }
  uint64_t message_old_id() const { return GetField<uint64_t>(VT_MESSAGE_OLD_ID, 0); }
  const grouppack::T_GROUP_BASE_INFO *group_info() const { return GetPointer<const grouppack::T_GROUP_BASE_INFO *>(VT_GROUP_INFO); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_USER_ID) &&
           VerifyField<uint64_t>(verifier, VT_MESSAGE_ID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_S_MSG) &&
           verifier.VerifyTable(s_msg()) &&
           VerifyField<int32_t>(verifier, VT_BIG_MSG_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_OPERATE_GROUP_MSG) &&
           verifier.VerifyTable(operate_group_msg()) &&
           VerifyField<uint64_t>(verifier, VT_MESSAGE_OLD_ID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_GROUP_INFO) &&
           verifier.VerifyTable(group_info()) &&
           verifier.EndTable();
  }
};

struct T_OFFLINE_GROUP_MSGBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_user_id(uint64_t user_id) { fbb_.AddElement<uint64_t>(T_OFFLINE_GROUP_MSG::VT_USER_ID, user_id, 0); }
  void add_message_id(uint64_t message_id) { fbb_.AddElement<uint64_t>(T_OFFLINE_GROUP_MSG::VT_MESSAGE_ID, message_id, 0); }
  void add_s_msg(flatbuffers::Offset<commonpack::S_MSG> s_msg) { fbb_.AddOffset(T_OFFLINE_GROUP_MSG::VT_S_MSG, s_msg); }
  void add_big_msg_type(int32_t big_msg_type) { fbb_.AddElement<int32_t>(T_OFFLINE_GROUP_MSG::VT_BIG_MSG_TYPE, big_msg_type, 0); }
  void add_operate_group_msg(flatbuffers::Offset<T_OPERATE_GROUP_MSG> operate_group_msg) { fbb_.AddOffset(T_OFFLINE_GROUP_MSG::VT_OPERATE_GROUP_MSG, operate_group_msg); }
  void add_message_old_id(uint64_t message_old_id) { fbb_.AddElement<uint64_t>(T_OFFLINE_GROUP_MSG::VT_MESSAGE_OLD_ID, message_old_id, 0); }
  void add_group_info(flatbuffers::Offset<grouppack::T_GROUP_BASE_INFO> group_info) { fbb_.AddOffset(T_OFFLINE_GROUP_MSG::VT_GROUP_INFO, group_info); }
  T_OFFLINE_GROUP_MSGBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_OFFLINE_GROUP_MSGBuilder &operator=(const T_OFFLINE_GROUP_MSGBuilder &);
  flatbuffers::Offset<T_OFFLINE_GROUP_MSG> Finish() {
    auto o = flatbuffers::Offset<T_OFFLINE_GROUP_MSG>(fbb_.EndTable(start_, 7));
    return o;
  }
};

inline flatbuffers::Offset<T_OFFLINE_GROUP_MSG> CreateT_OFFLINE_GROUP_MSG(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t user_id = 0,
    uint64_t message_id = 0,
    flatbuffers::Offset<commonpack::S_MSG> s_msg = 0,
    int32_t big_msg_type = 0,
    flatbuffers::Offset<T_OPERATE_GROUP_MSG> operate_group_msg = 0,
    uint64_t message_old_id = 0,
    flatbuffers::Offset<grouppack::T_GROUP_BASE_INFO> group_info = 0) {
  T_OFFLINE_GROUP_MSGBuilder builder_(_fbb);
  builder_.add_message_old_id(message_old_id);
  builder_.add_message_id(message_id);
  builder_.add_user_id(user_id);
  builder_.add_group_info(group_info);
  builder_.add_operate_group_msg(operate_group_msg);
  builder_.add_big_msg_type(big_msg_type);
  builder_.add_s_msg(s_msg);
  return builder_.Finish();
}

inline const grouppack::T_OFFLINE_GROUP_MSG *GetT_OFFLINE_GROUP_MSG(const void *buf) {
  return flatbuffers::GetRoot<grouppack::T_OFFLINE_GROUP_MSG>(buf);
}

inline bool VerifyT_OFFLINE_GROUP_MSGBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<grouppack::T_OFFLINE_GROUP_MSG>(nullptr);
}

inline void FinishT_OFFLINE_GROUP_MSGBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<grouppack::T_OFFLINE_GROUP_MSG> root) {
  fbb.Finish(root);
}

}  // namespace grouppack

#endif  // FLATBUFFERS_GENERATED_FBGROUPOFFLINEMSG_GROUPPACK_H_
