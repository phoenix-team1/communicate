// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBGROUPSCANRQ_GROUPPACK_H_
#define FLATBUFFERS_GENERATED_FBGROUPSCANRQ_GROUPPACK_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace grouppack {

struct T_GROUP_SCAN_RQ;

struct T_GROUP_SCAN_RQ FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_S_RQ_HEAD = 4,
    VT_GROUP_ID = 6,
    VT_USER_ID_SHARE = 8
  };
  const commonpack::S_RQ_HEAD *s_rq_head() const { return GetStruct<const commonpack::S_RQ_HEAD *>(VT_S_RQ_HEAD); }
  uint64_t group_id() const { return GetField<uint64_t>(VT_GROUP_ID, 0); }
  uint64_t user_id_share() const { return GetField<uint64_t>(VT_USER_ID_SHARE, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<commonpack::S_RQ_HEAD>(verifier, VT_S_RQ_HEAD) &&
           VerifyField<uint64_t>(verifier, VT_GROUP_ID) &&
           VerifyField<uint64_t>(verifier, VT_USER_ID_SHARE) &&
           verifier.EndTable();
  }
};

struct T_GROUP_SCAN_RQBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_s_rq_head(const commonpack::S_RQ_HEAD *s_rq_head) { fbb_.AddStruct(T_GROUP_SCAN_RQ::VT_S_RQ_HEAD, s_rq_head); }
  void add_group_id(uint64_t group_id) { fbb_.AddElement<uint64_t>(T_GROUP_SCAN_RQ::VT_GROUP_ID, group_id, 0); }
  void add_user_id_share(uint64_t user_id_share) { fbb_.AddElement<uint64_t>(T_GROUP_SCAN_RQ::VT_USER_ID_SHARE, user_id_share, 0); }
  T_GROUP_SCAN_RQBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_GROUP_SCAN_RQBuilder &operator=(const T_GROUP_SCAN_RQBuilder &);
  flatbuffers::Offset<T_GROUP_SCAN_RQ> Finish() {
    auto o = flatbuffers::Offset<T_GROUP_SCAN_RQ>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<T_GROUP_SCAN_RQ> CreateT_GROUP_SCAN_RQ(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RQ_HEAD *s_rq_head = 0,
    uint64_t group_id = 0,
    uint64_t user_id_share = 0) {
  T_GROUP_SCAN_RQBuilder builder_(_fbb);
  builder_.add_user_id_share(user_id_share);
  builder_.add_group_id(group_id);
  builder_.add_s_rq_head(s_rq_head);
  return builder_.Finish();
}

inline const grouppack::T_GROUP_SCAN_RQ *GetT_GROUP_SCAN_RQ(const void *buf) {
  return flatbuffers::GetRoot<grouppack::T_GROUP_SCAN_RQ>(buf);
}

inline bool VerifyT_GROUP_SCAN_RQBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<grouppack::T_GROUP_SCAN_RQ>(nullptr);
}

inline void FinishT_GROUP_SCAN_RQBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<grouppack::T_GROUP_SCAN_RQ> root) {
  fbb.Finish(root);
}

}  // namespace grouppack

#endif  // FLATBUFFERS_GENERATED_FBGROUPSCANRQ_GROUPPACK_H_
