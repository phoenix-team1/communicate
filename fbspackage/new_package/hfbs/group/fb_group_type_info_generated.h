// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBGROUPTYPEINFO_GROUPPACK_H_
#define FLATBUFFERS_GENERATED_FBGROUPTYPEINFO_GROUPPACK_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace grouppack {

struct T_GROUP_TYPE_INFO;

struct T_GROUP_TYPE_INFO FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_GROUP_MAX_COUNT = 4,
    VT_GROUP_TYPE = 6,
    VT_GROUP_IS_SHOW = 8,
    VT_GROUP_ADD_MAX_COUNT = 10
  };
  int32_t group_max_count() const { return GetField<int32_t>(VT_GROUP_MAX_COUNT, 0); }
  int32_t group_type() const { return GetField<int32_t>(VT_GROUP_TYPE, 0); }
  int8_t group_is_show() const { return GetField<int8_t>(VT_GROUP_IS_SHOW, 0); }
  int32_t group_add_max_count() const { return GetField<int32_t>(VT_GROUP_ADD_MAX_COUNT, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_GROUP_MAX_COUNT) &&
           VerifyField<int32_t>(verifier, VT_GROUP_TYPE) &&
           VerifyField<int8_t>(verifier, VT_GROUP_IS_SHOW) &&
           VerifyField<int32_t>(verifier, VT_GROUP_ADD_MAX_COUNT) &&
           verifier.EndTable();
  }
};

struct T_GROUP_TYPE_INFOBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_group_max_count(int32_t group_max_count) { fbb_.AddElement<int32_t>(T_GROUP_TYPE_INFO::VT_GROUP_MAX_COUNT, group_max_count, 0); }
  void add_group_type(int32_t group_type) { fbb_.AddElement<int32_t>(T_GROUP_TYPE_INFO::VT_GROUP_TYPE, group_type, 0); }
  void add_group_is_show(int8_t group_is_show) { fbb_.AddElement<int8_t>(T_GROUP_TYPE_INFO::VT_GROUP_IS_SHOW, group_is_show, 0); }
  void add_group_add_max_count(int32_t group_add_max_count) { fbb_.AddElement<int32_t>(T_GROUP_TYPE_INFO::VT_GROUP_ADD_MAX_COUNT, group_add_max_count, 0); }
  T_GROUP_TYPE_INFOBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_GROUP_TYPE_INFOBuilder &operator=(const T_GROUP_TYPE_INFOBuilder &);
  flatbuffers::Offset<T_GROUP_TYPE_INFO> Finish() {
    auto o = flatbuffers::Offset<T_GROUP_TYPE_INFO>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<T_GROUP_TYPE_INFO> CreateT_GROUP_TYPE_INFO(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t group_max_count = 0,
    int32_t group_type = 0,
    int8_t group_is_show = 0,
    int32_t group_add_max_count = 0) {
  T_GROUP_TYPE_INFOBuilder builder_(_fbb);
  builder_.add_group_add_max_count(group_add_max_count);
  builder_.add_group_type(group_type);
  builder_.add_group_max_count(group_max_count);
  builder_.add_group_is_show(group_is_show);
  return builder_.Finish();
}

inline const grouppack::T_GROUP_TYPE_INFO *GetT_GROUP_TYPE_INFO(const void *buf) {
  return flatbuffers::GetRoot<grouppack::T_GROUP_TYPE_INFO>(buf);
}

inline bool VerifyT_GROUP_TYPE_INFOBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<grouppack::T_GROUP_TYPE_INFO>(nullptr);
}

inline void FinishT_GROUP_TYPE_INFOBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<grouppack::T_GROUP_TYPE_INFO> root) {
  fbb.Finish(root);
}

}  // namespace grouppack

#endif  // FLATBUFFERS_GENERATED_FBGROUPTYPEINFO_GROUPPACK_H_
