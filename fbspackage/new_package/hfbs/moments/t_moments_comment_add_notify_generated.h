// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_TMOMENTSCOMMENTADDNOTIFY_MOMENTSPACK_H_
#define FLATBUFFERS_GENERATED_TMOMENTSCOMMENTADDNOTIFY_MOMENTSPACK_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"
#include "t_moments_common_generated.h"

namespace momentspack {

struct T_MOMENTS_COMMENT_ADD_NOTIFY;

struct T_MOMENTS_COMMENT_ADD_NOTIFY FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_COMMENT = 4
  };
  const momentspack::T_MOMENTS_COMMENT_DTO *comment() const { return GetPointer<const momentspack::T_MOMENTS_COMMENT_DTO *>(VT_COMMENT); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_COMMENT) &&
           verifier.VerifyTable(comment()) &&
           verifier.EndTable();
  }
};

struct T_MOMENTS_COMMENT_ADD_NOTIFYBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_comment(flatbuffers::Offset<momentspack::T_MOMENTS_COMMENT_DTO> comment) { fbb_.AddOffset(T_MOMENTS_COMMENT_ADD_NOTIFY::VT_COMMENT, comment); }
  T_MOMENTS_COMMENT_ADD_NOTIFYBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_MOMENTS_COMMENT_ADD_NOTIFYBuilder &operator=(const T_MOMENTS_COMMENT_ADD_NOTIFYBuilder &);
  flatbuffers::Offset<T_MOMENTS_COMMENT_ADD_NOTIFY> Finish() {
    auto o = flatbuffers::Offset<T_MOMENTS_COMMENT_ADD_NOTIFY>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<T_MOMENTS_COMMENT_ADD_NOTIFY> CreateT_MOMENTS_COMMENT_ADD_NOTIFY(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<momentspack::T_MOMENTS_COMMENT_DTO> comment = 0) {
  T_MOMENTS_COMMENT_ADD_NOTIFYBuilder builder_(_fbb);
  builder_.add_comment(comment);
  return builder_.Finish();
}

inline const momentspack::T_MOMENTS_COMMENT_ADD_NOTIFY *GetT_MOMENTS_COMMENT_ADD_NOTIFY(const void *buf) {
  return flatbuffers::GetRoot<momentspack::T_MOMENTS_COMMENT_ADD_NOTIFY>(buf);
}

inline bool VerifyT_MOMENTS_COMMENT_ADD_NOTIFYBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<momentspack::T_MOMENTS_COMMENT_ADD_NOTIFY>(nullptr);
}

inline void FinishT_MOMENTS_COMMENT_ADD_NOTIFYBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<momentspack::T_MOMENTS_COMMENT_ADD_NOTIFY> root) {
  fbb.Finish(root);
}

}  // namespace momentspack

#endif  // FLATBUFFERS_GENERATED_TMOMENTSCOMMENTADDNOTIFY_MOMENTSPACK_H_
