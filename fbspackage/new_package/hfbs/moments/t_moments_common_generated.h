// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_TMOMENTSCOMMON_MOMENTSPACK_H_
#define FLATBUFFERS_GENERATED_TMOMENTSCOMMON_MOMENTSPACK_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace momentspack {

struct T_TIMELINE_DTO;

struct T_MOMENTS_ARTICLE_DTO;

struct T_MOMENTS_COMMENT_DTO;

struct T_MOMENTS_SETTING_DTO;

struct T_SETTING_LIST_DTO;

MANUALLY_ALIGNED_STRUCT(8) T_SETTING_LIST_DTO FLATBUFFERS_FINAL_CLASS {
 private:
  uint64_t user_id_;
  uint64_t friend_id_;
  int8_t list_type_;
  int8_t list_value_;
  int16_t __padding0;
  int32_t __padding1;

 public:
  T_SETTING_LIST_DTO() { memset(this, 0, sizeof(T_SETTING_LIST_DTO)); }
  T_SETTING_LIST_DTO(const T_SETTING_LIST_DTO &_o) { memcpy(this, &_o, sizeof(T_SETTING_LIST_DTO)); }
  T_SETTING_LIST_DTO(uint64_t _user_id, uint64_t _friend_id, int8_t _list_type, int8_t _list_value)
    : user_id_(flatbuffers::EndianScalar(_user_id)), friend_id_(flatbuffers::EndianScalar(_friend_id)), list_type_(flatbuffers::EndianScalar(_list_type)), list_value_(flatbuffers::EndianScalar(_list_value)), __padding0(0), __padding1(0) { (void)__padding0; (void)__padding1; }

  uint64_t user_id() const { return flatbuffers::EndianScalar(user_id_); }
  uint64_t friend_id() const { return flatbuffers::EndianScalar(friend_id_); }
  int8_t list_type() const { return flatbuffers::EndianScalar(list_type_); }
  int8_t list_value() const { return flatbuffers::EndianScalar(list_value_); }
};
STRUCT_END(T_SETTING_LIST_DTO, 24);

struct T_TIMELINE_DTO FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ARTICLE_USER_ID = 4,
    VT_ARTICLE_ID = 6
  };
  uint64_t article_user_id() const { return GetField<uint64_t>(VT_ARTICLE_USER_ID, 0); }
  uint64_t article_id() const { return GetField<uint64_t>(VT_ARTICLE_ID, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ARTICLE_USER_ID) &&
           VerifyField<uint64_t>(verifier, VT_ARTICLE_ID) &&
           verifier.EndTable();
  }
};

struct T_TIMELINE_DTOBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_article_user_id(uint64_t article_user_id) { fbb_.AddElement<uint64_t>(T_TIMELINE_DTO::VT_ARTICLE_USER_ID, article_user_id, 0); }
  void add_article_id(uint64_t article_id) { fbb_.AddElement<uint64_t>(T_TIMELINE_DTO::VT_ARTICLE_ID, article_id, 0); }
  T_TIMELINE_DTOBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_TIMELINE_DTOBuilder &operator=(const T_TIMELINE_DTOBuilder &);
  flatbuffers::Offset<T_TIMELINE_DTO> Finish() {
    auto o = flatbuffers::Offset<T_TIMELINE_DTO>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<T_TIMELINE_DTO> CreateT_TIMELINE_DTO(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t article_user_id = 0,
    uint64_t article_id = 0) {
  T_TIMELINE_DTOBuilder builder_(_fbb);
  builder_.add_article_id(article_id);
  builder_.add_article_user_id(article_user_id);
  return builder_.Finish();
}

struct T_MOMENTS_ARTICLE_DTO FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_USER_ID = 4,
    VT_ARTICLE_ID = 6,
    VT_TITLE = 8,
    VT_CONTENT_TYPE = 10,
    VT_CONTENT = 12,
    VT_PRIV_TYPE = 14,
    VT_WHITE_LIST = 16,
    VT_BLACK_LIST = 18,
    VT_CREATE_TIME = 20
  };
  uint64_t user_id() const { return GetField<uint64_t>(VT_USER_ID, 0); }
  uint64_t article_id() const { return GetField<uint64_t>(VT_ARTICLE_ID, 0); }
  const flatbuffers::String *title() const { return GetPointer<const flatbuffers::String *>(VT_TITLE); }
  int32_t content_type() const { return GetField<int32_t>(VT_CONTENT_TYPE, 0); }
  const flatbuffers::String *content() const { return GetPointer<const flatbuffers::String *>(VT_CONTENT); }
  int32_t priv_type() const { return GetField<int32_t>(VT_PRIV_TYPE, 0); }
  const flatbuffers::String *white_list() const { return GetPointer<const flatbuffers::String *>(VT_WHITE_LIST); }
  const flatbuffers::String *black_list() const { return GetPointer<const flatbuffers::String *>(VT_BLACK_LIST); }
  uint64_t create_time() const { return GetField<uint64_t>(VT_CREATE_TIME, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_USER_ID) &&
           VerifyField<uint64_t>(verifier, VT_ARTICLE_ID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TITLE) &&
           verifier.Verify(title()) &&
           VerifyField<int32_t>(verifier, VT_CONTENT_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CONTENT) &&
           verifier.Verify(content()) &&
           VerifyField<int32_t>(verifier, VT_PRIV_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_WHITE_LIST) &&
           verifier.Verify(white_list()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_BLACK_LIST) &&
           verifier.Verify(black_list()) &&
           VerifyField<uint64_t>(verifier, VT_CREATE_TIME) &&
           verifier.EndTable();
  }
};

struct T_MOMENTS_ARTICLE_DTOBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_user_id(uint64_t user_id) { fbb_.AddElement<uint64_t>(T_MOMENTS_ARTICLE_DTO::VT_USER_ID, user_id, 0); }
  void add_article_id(uint64_t article_id) { fbb_.AddElement<uint64_t>(T_MOMENTS_ARTICLE_DTO::VT_ARTICLE_ID, article_id, 0); }
  void add_title(flatbuffers::Offset<flatbuffers::String> title) { fbb_.AddOffset(T_MOMENTS_ARTICLE_DTO::VT_TITLE, title); }
  void add_content_type(int32_t content_type) { fbb_.AddElement<int32_t>(T_MOMENTS_ARTICLE_DTO::VT_CONTENT_TYPE, content_type, 0); }
  void add_content(flatbuffers::Offset<flatbuffers::String> content) { fbb_.AddOffset(T_MOMENTS_ARTICLE_DTO::VT_CONTENT, content); }
  void add_priv_type(int32_t priv_type) { fbb_.AddElement<int32_t>(T_MOMENTS_ARTICLE_DTO::VT_PRIV_TYPE, priv_type, 0); }
  void add_white_list(flatbuffers::Offset<flatbuffers::String> white_list) { fbb_.AddOffset(T_MOMENTS_ARTICLE_DTO::VT_WHITE_LIST, white_list); }
  void add_black_list(flatbuffers::Offset<flatbuffers::String> black_list) { fbb_.AddOffset(T_MOMENTS_ARTICLE_DTO::VT_BLACK_LIST, black_list); }
  void add_create_time(uint64_t create_time) { fbb_.AddElement<uint64_t>(T_MOMENTS_ARTICLE_DTO::VT_CREATE_TIME, create_time, 0); }
  T_MOMENTS_ARTICLE_DTOBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_MOMENTS_ARTICLE_DTOBuilder &operator=(const T_MOMENTS_ARTICLE_DTOBuilder &);
  flatbuffers::Offset<T_MOMENTS_ARTICLE_DTO> Finish() {
    auto o = flatbuffers::Offset<T_MOMENTS_ARTICLE_DTO>(fbb_.EndTable(start_, 9));
    return o;
  }
};

inline flatbuffers::Offset<T_MOMENTS_ARTICLE_DTO> CreateT_MOMENTS_ARTICLE_DTO(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t user_id = 0,
    uint64_t article_id = 0,
    flatbuffers::Offset<flatbuffers::String> title = 0,
    int32_t content_type = 0,
    flatbuffers::Offset<flatbuffers::String> content = 0,
    int32_t priv_type = 0,
    flatbuffers::Offset<flatbuffers::String> white_list = 0,
    flatbuffers::Offset<flatbuffers::String> black_list = 0,
    uint64_t create_time = 0) {
  T_MOMENTS_ARTICLE_DTOBuilder builder_(_fbb);
  builder_.add_create_time(create_time);
  builder_.add_article_id(article_id);
  builder_.add_user_id(user_id);
  builder_.add_black_list(black_list);
  builder_.add_white_list(white_list);
  builder_.add_priv_type(priv_type);
  builder_.add_content(content);
  builder_.add_content_type(content_type);
  builder_.add_title(title);
  return builder_.Finish();
}

inline flatbuffers::Offset<T_MOMENTS_ARTICLE_DTO> CreateT_MOMENTS_ARTICLE_DTODirect(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t user_id = 0,
    uint64_t article_id = 0,
    const char *title = nullptr,
    int32_t content_type = 0,
    const char *content = nullptr,
    int32_t priv_type = 0,
    const char *white_list = nullptr,
    const char *black_list = nullptr,
    uint64_t create_time = 0) {
  return CreateT_MOMENTS_ARTICLE_DTO(_fbb, user_id, article_id, title ? _fbb.CreateString(title) : 0, content_type, content ? _fbb.CreateString(content) : 0, priv_type, white_list ? _fbb.CreateString(white_list) : 0, black_list ? _fbb.CreateString(black_list) : 0, create_time);
}

struct T_MOMENTS_COMMENT_DTO FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_COMMENT_ID = 4,
    VT_USER_ID = 6,
    VT_USER_NICKNAME = 8,
    VT_ARTICLE_USER_ID = 10,
    VT_ARTICLE_ID = 12,
    VT_COMMENT_TYPE = 14,
    VT_CONTENT = 16,
    VT_COMMENTED_USER_ID = 18,
    VT_COMMENTED_USER_NICKNAME = 20,
    VT_CREATE_TIME = 22
  };
  uint64_t comment_id() const { return GetField<uint64_t>(VT_COMMENT_ID, 0); }
  uint64_t user_id() const { return GetField<uint64_t>(VT_USER_ID, 0); }
  const flatbuffers::String *user_nickname() const { return GetPointer<const flatbuffers::String *>(VT_USER_NICKNAME); }
  uint64_t article_user_id() const { return GetField<uint64_t>(VT_ARTICLE_USER_ID, 0); }
  uint64_t article_id() const { return GetField<uint64_t>(VT_ARTICLE_ID, 0); }
  int8_t comment_type() const { return GetField<int8_t>(VT_COMMENT_TYPE, 0); }
  const flatbuffers::String *content() const { return GetPointer<const flatbuffers::String *>(VT_CONTENT); }
  uint64_t commented_user_id() const { return GetField<uint64_t>(VT_COMMENTED_USER_ID, 0); }
  const flatbuffers::String *commented_user_nickname() const { return GetPointer<const flatbuffers::String *>(VT_COMMENTED_USER_NICKNAME); }
  uint64_t create_time() const { return GetField<uint64_t>(VT_CREATE_TIME, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_COMMENT_ID) &&
           VerifyField<uint64_t>(verifier, VT_USER_ID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_USER_NICKNAME) &&
           verifier.Verify(user_nickname()) &&
           VerifyField<uint64_t>(verifier, VT_ARTICLE_USER_ID) &&
           VerifyField<uint64_t>(verifier, VT_ARTICLE_ID) &&
           VerifyField<int8_t>(verifier, VT_COMMENT_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CONTENT) &&
           verifier.Verify(content()) &&
           VerifyField<uint64_t>(verifier, VT_COMMENTED_USER_ID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_COMMENTED_USER_NICKNAME) &&
           verifier.Verify(commented_user_nickname()) &&
           VerifyField<uint64_t>(verifier, VT_CREATE_TIME) &&
           verifier.EndTable();
  }
};

struct T_MOMENTS_COMMENT_DTOBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_comment_id(uint64_t comment_id) { fbb_.AddElement<uint64_t>(T_MOMENTS_COMMENT_DTO::VT_COMMENT_ID, comment_id, 0); }
  void add_user_id(uint64_t user_id) { fbb_.AddElement<uint64_t>(T_MOMENTS_COMMENT_DTO::VT_USER_ID, user_id, 0); }
  void add_user_nickname(flatbuffers::Offset<flatbuffers::String> user_nickname) { fbb_.AddOffset(T_MOMENTS_COMMENT_DTO::VT_USER_NICKNAME, user_nickname); }
  void add_article_user_id(uint64_t article_user_id) { fbb_.AddElement<uint64_t>(T_MOMENTS_COMMENT_DTO::VT_ARTICLE_USER_ID, article_user_id, 0); }
  void add_article_id(uint64_t article_id) { fbb_.AddElement<uint64_t>(T_MOMENTS_COMMENT_DTO::VT_ARTICLE_ID, article_id, 0); }
  void add_comment_type(int8_t comment_type) { fbb_.AddElement<int8_t>(T_MOMENTS_COMMENT_DTO::VT_COMMENT_TYPE, comment_type, 0); }
  void add_content(flatbuffers::Offset<flatbuffers::String> content) { fbb_.AddOffset(T_MOMENTS_COMMENT_DTO::VT_CONTENT, content); }
  void add_commented_user_id(uint64_t commented_user_id) { fbb_.AddElement<uint64_t>(T_MOMENTS_COMMENT_DTO::VT_COMMENTED_USER_ID, commented_user_id, 0); }
  void add_commented_user_nickname(flatbuffers::Offset<flatbuffers::String> commented_user_nickname) { fbb_.AddOffset(T_MOMENTS_COMMENT_DTO::VT_COMMENTED_USER_NICKNAME, commented_user_nickname); }
  void add_create_time(uint64_t create_time) { fbb_.AddElement<uint64_t>(T_MOMENTS_COMMENT_DTO::VT_CREATE_TIME, create_time, 0); }
  T_MOMENTS_COMMENT_DTOBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_MOMENTS_COMMENT_DTOBuilder &operator=(const T_MOMENTS_COMMENT_DTOBuilder &);
  flatbuffers::Offset<T_MOMENTS_COMMENT_DTO> Finish() {
    auto o = flatbuffers::Offset<T_MOMENTS_COMMENT_DTO>(fbb_.EndTable(start_, 10));
    return o;
  }
};

inline flatbuffers::Offset<T_MOMENTS_COMMENT_DTO> CreateT_MOMENTS_COMMENT_DTO(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t comment_id = 0,
    uint64_t user_id = 0,
    flatbuffers::Offset<flatbuffers::String> user_nickname = 0,
    uint64_t article_user_id = 0,
    uint64_t article_id = 0,
    int8_t comment_type = 0,
    flatbuffers::Offset<flatbuffers::String> content = 0,
    uint64_t commented_user_id = 0,
    flatbuffers::Offset<flatbuffers::String> commented_user_nickname = 0,
    uint64_t create_time = 0) {
  T_MOMENTS_COMMENT_DTOBuilder builder_(_fbb);
  builder_.add_create_time(create_time);
  builder_.add_commented_user_id(commented_user_id);
  builder_.add_article_id(article_id);
  builder_.add_article_user_id(article_user_id);
  builder_.add_user_id(user_id);
  builder_.add_comment_id(comment_id);
  builder_.add_commented_user_nickname(commented_user_nickname);
  builder_.add_content(content);
  builder_.add_user_nickname(user_nickname);
  builder_.add_comment_type(comment_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<T_MOMENTS_COMMENT_DTO> CreateT_MOMENTS_COMMENT_DTODirect(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t comment_id = 0,
    uint64_t user_id = 0,
    const char *user_nickname = nullptr,
    uint64_t article_user_id = 0,
    uint64_t article_id = 0,
    int8_t comment_type = 0,
    const char *content = nullptr,
    uint64_t commented_user_id = 0,
    const char *commented_user_nickname = nullptr,
    uint64_t create_time = 0) {
  return CreateT_MOMENTS_COMMENT_DTO(_fbb, comment_id, user_id, user_nickname ? _fbb.CreateString(user_nickname) : 0, article_user_id, article_id, comment_type, content ? _fbb.CreateString(content) : 0, commented_user_id, commented_user_nickname ? _fbb.CreateString(commented_user_nickname) : 0, create_time);
}

struct T_MOMENTS_SETTING_DTO FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_USER_ID = 4,
    VT_LIST_10_PIC_FREE = 6,
    VT_MOMENTS_SCOPE = 8,
    VT_MOMENTS_ENABLE = 10,
    VT_MOMENTS_NOTICE = 12,
    VT_BLACK_LIST = 14,
    VT_NOT_CARE_LIST = 16,
    VT_UPDATE_TIME = 18
  };
  uint64_t user_id() const { return GetField<uint64_t>(VT_USER_ID, 0); }
  int8_t list_10_pic_free() const { return GetField<int8_t>(VT_LIST_10_PIC_FREE, 0); }
  int8_t moments_scope() const { return GetField<int8_t>(VT_MOMENTS_SCOPE, 0); }
  int8_t moments_enable() const { return GetField<int8_t>(VT_MOMENTS_ENABLE, 0); }
  int8_t moments_notice() const { return GetField<int8_t>(VT_MOMENTS_NOTICE, 0); }
  const flatbuffers::String *black_list() const { return GetPointer<const flatbuffers::String *>(VT_BLACK_LIST); }
  const flatbuffers::String *not_care_list() const { return GetPointer<const flatbuffers::String *>(VT_NOT_CARE_LIST); }
  uint64_t update_time() const { return GetField<uint64_t>(VT_UPDATE_TIME, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_USER_ID) &&
           VerifyField<int8_t>(verifier, VT_LIST_10_PIC_FREE) &&
           VerifyField<int8_t>(verifier, VT_MOMENTS_SCOPE) &&
           VerifyField<int8_t>(verifier, VT_MOMENTS_ENABLE) &&
           VerifyField<int8_t>(verifier, VT_MOMENTS_NOTICE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_BLACK_LIST) &&
           verifier.Verify(black_list()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NOT_CARE_LIST) &&
           verifier.Verify(not_care_list()) &&
           VerifyField<uint64_t>(verifier, VT_UPDATE_TIME) &&
           verifier.EndTable();
  }
};

struct T_MOMENTS_SETTING_DTOBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_user_id(uint64_t user_id) { fbb_.AddElement<uint64_t>(T_MOMENTS_SETTING_DTO::VT_USER_ID, user_id, 0); }
  void add_list_10_pic_free(int8_t list_10_pic_free) { fbb_.AddElement<int8_t>(T_MOMENTS_SETTING_DTO::VT_LIST_10_PIC_FREE, list_10_pic_free, 0); }
  void add_moments_scope(int8_t moments_scope) { fbb_.AddElement<int8_t>(T_MOMENTS_SETTING_DTO::VT_MOMENTS_SCOPE, moments_scope, 0); }
  void add_moments_enable(int8_t moments_enable) { fbb_.AddElement<int8_t>(T_MOMENTS_SETTING_DTO::VT_MOMENTS_ENABLE, moments_enable, 0); }
  void add_moments_notice(int8_t moments_notice) { fbb_.AddElement<int8_t>(T_MOMENTS_SETTING_DTO::VT_MOMENTS_NOTICE, moments_notice, 0); }
  void add_black_list(flatbuffers::Offset<flatbuffers::String> black_list) { fbb_.AddOffset(T_MOMENTS_SETTING_DTO::VT_BLACK_LIST, black_list); }
  void add_not_care_list(flatbuffers::Offset<flatbuffers::String> not_care_list) { fbb_.AddOffset(T_MOMENTS_SETTING_DTO::VT_NOT_CARE_LIST, not_care_list); }
  void add_update_time(uint64_t update_time) { fbb_.AddElement<uint64_t>(T_MOMENTS_SETTING_DTO::VT_UPDATE_TIME, update_time, 0); }
  T_MOMENTS_SETTING_DTOBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_MOMENTS_SETTING_DTOBuilder &operator=(const T_MOMENTS_SETTING_DTOBuilder &);
  flatbuffers::Offset<T_MOMENTS_SETTING_DTO> Finish() {
    auto o = flatbuffers::Offset<T_MOMENTS_SETTING_DTO>(fbb_.EndTable(start_, 8));
    return o;
  }
};

inline flatbuffers::Offset<T_MOMENTS_SETTING_DTO> CreateT_MOMENTS_SETTING_DTO(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t user_id = 0,
    int8_t list_10_pic_free = 0,
    int8_t moments_scope = 0,
    int8_t moments_enable = 0,
    int8_t moments_notice = 0,
    flatbuffers::Offset<flatbuffers::String> black_list = 0,
    flatbuffers::Offset<flatbuffers::String> not_care_list = 0,
    uint64_t update_time = 0) {
  T_MOMENTS_SETTING_DTOBuilder builder_(_fbb);
  builder_.add_update_time(update_time);
  builder_.add_user_id(user_id);
  builder_.add_not_care_list(not_care_list);
  builder_.add_black_list(black_list);
  builder_.add_moments_notice(moments_notice);
  builder_.add_moments_enable(moments_enable);
  builder_.add_moments_scope(moments_scope);
  builder_.add_list_10_pic_free(list_10_pic_free);
  return builder_.Finish();
}

inline flatbuffers::Offset<T_MOMENTS_SETTING_DTO> CreateT_MOMENTS_SETTING_DTODirect(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t user_id = 0,
    int8_t list_10_pic_free = 0,
    int8_t moments_scope = 0,
    int8_t moments_enable = 0,
    int8_t moments_notice = 0,
    const char *black_list = nullptr,
    const char *not_care_list = nullptr,
    uint64_t update_time = 0) {
  return CreateT_MOMENTS_SETTING_DTO(_fbb, user_id, list_10_pic_free, moments_scope, moments_enable, moments_notice, black_list ? _fbb.CreateString(black_list) : 0, not_care_list ? _fbb.CreateString(not_care_list) : 0, update_time);
}

}  // namespace momentspack

#endif  // FLATBUFFERS_GENERATED_TMOMENTSCOMMON_MOMENTSPACK_H_
