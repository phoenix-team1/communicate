// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBCLIENTOFFCIALGETUNREADCNTRS_OFFCIALPACK_H_
#define FLATBUFFERS_GENERATED_FBCLIENTOFFCIALGETUNREADCNTRS_OFFCIALPACK_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace offcialpack {

struct T_CLIENT_OFFCIAL_GET_UNREAD_CNT_RS;

struct T_CLIENT_OFFCIAL_GET_UNREAD_CNT_RS FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_S_RS_HEAD = 4,
    VT_UNREAD_COUNT = 6
  };
  const commonpack::S_RS_HEAD *s_rs_head() const { return GetStruct<const commonpack::S_RS_HEAD *>(VT_S_RS_HEAD); }
  int32_t unread_count() const { return GetField<int32_t>(VT_UNREAD_COUNT, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<commonpack::S_RS_HEAD>(verifier, VT_S_RS_HEAD) &&
           VerifyField<int32_t>(verifier, VT_UNREAD_COUNT) &&
           verifier.EndTable();
  }
};

struct T_CLIENT_OFFCIAL_GET_UNREAD_CNT_RSBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_s_rs_head(const commonpack::S_RS_HEAD *s_rs_head) { fbb_.AddStruct(T_CLIENT_OFFCIAL_GET_UNREAD_CNT_RS::VT_S_RS_HEAD, s_rs_head); }
  void add_unread_count(int32_t unread_count) { fbb_.AddElement<int32_t>(T_CLIENT_OFFCIAL_GET_UNREAD_CNT_RS::VT_UNREAD_COUNT, unread_count, 0); }
  T_CLIENT_OFFCIAL_GET_UNREAD_CNT_RSBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_CLIENT_OFFCIAL_GET_UNREAD_CNT_RSBuilder &operator=(const T_CLIENT_OFFCIAL_GET_UNREAD_CNT_RSBuilder &);
  flatbuffers::Offset<T_CLIENT_OFFCIAL_GET_UNREAD_CNT_RS> Finish() {
    auto o = flatbuffers::Offset<T_CLIENT_OFFCIAL_GET_UNREAD_CNT_RS>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<T_CLIENT_OFFCIAL_GET_UNREAD_CNT_RS> CreateT_CLIENT_OFFCIAL_GET_UNREAD_CNT_RS(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RS_HEAD *s_rs_head = 0,
    int32_t unread_count = 0) {
  T_CLIENT_OFFCIAL_GET_UNREAD_CNT_RSBuilder builder_(_fbb);
  builder_.add_unread_count(unread_count);
  builder_.add_s_rs_head(s_rs_head);
  return builder_.Finish();
}

inline const offcialpack::T_CLIENT_OFFCIAL_GET_UNREAD_CNT_RS *GetT_CLIENT_OFFCIAL_GET_UNREAD_CNT_RS(const void *buf) {
  return flatbuffers::GetRoot<offcialpack::T_CLIENT_OFFCIAL_GET_UNREAD_CNT_RS>(buf);
}

inline bool VerifyT_CLIENT_OFFCIAL_GET_UNREAD_CNT_RSBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<offcialpack::T_CLIENT_OFFCIAL_GET_UNREAD_CNT_RS>(nullptr);
}

inline void FinishT_CLIENT_OFFCIAL_GET_UNREAD_CNT_RSBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<offcialpack::T_CLIENT_OFFCIAL_GET_UNREAD_CNT_RS> root) {
  fbb.Finish(root);
}

}  // namespace offcialpack

#endif  // FLATBUFFERS_GENERATED_FBCLIENTOFFCIALGETUNREADCNTRS_OFFCIALPACK_H_
