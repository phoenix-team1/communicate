// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBLOGINRQ_SYSPACK_H_
#define FLATBUFFERS_GENERATED_FBLOGINRQ_SYSPACK_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace syspack {

struct T_LOGIN_RQ;

struct T_LOGIN_RQ FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_S_RQ_HEAD = 4,
    VT_AP_ID = 6,
    VT_CLIENT_TIME = 8,
    VT_COOKIE = 10,
    VT_TGT = 12,
    VT_CLIENT_VERSION = 14,
    VT_PLATFORM = 16,
    VT_DEVICE_CODE = 18,
    VT_OS_TYPE = 20,
    VT_NET_TYPE = 22
  };
  const commonpack::S_RQ_HEAD *s_rq_head() const { return GetStruct<const commonpack::S_RQ_HEAD *>(VT_S_RQ_HEAD); }
  int32_t ap_id() const { return GetField<int32_t>(VT_AP_ID, 0); }
  uint64_t client_time() const { return GetField<uint64_t>(VT_CLIENT_TIME, 0); }
  const flatbuffers::Vector<uint8_t> *cookie() const { return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_COOKIE); }
  const flatbuffers::String *tgt() const { return GetPointer<const flatbuffers::String *>(VT_TGT); }
  const flatbuffers::String *client_version() const { return GetPointer<const flatbuffers::String *>(VT_CLIENT_VERSION); }
  int8_t platform() const { return GetField<int8_t>(VT_PLATFORM, 0); }
  const flatbuffers::String *device_code() const { return GetPointer<const flatbuffers::String *>(VT_DEVICE_CODE); }
  const flatbuffers::String *os_type() const { return GetPointer<const flatbuffers::String *>(VT_OS_TYPE); }
  int8_t net_type() const { return GetField<int8_t>(VT_NET_TYPE, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<commonpack::S_RQ_HEAD>(verifier, VT_S_RQ_HEAD) &&
           VerifyField<int32_t>(verifier, VT_AP_ID) &&
           VerifyField<uint64_t>(verifier, VT_CLIENT_TIME) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_COOKIE) &&
           verifier.Verify(cookie()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TGT) &&
           verifier.Verify(tgt()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CLIENT_VERSION) &&
           verifier.Verify(client_version()) &&
           VerifyField<int8_t>(verifier, VT_PLATFORM) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DEVICE_CODE) &&
           verifier.Verify(device_code()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_OS_TYPE) &&
           verifier.Verify(os_type()) &&
           VerifyField<int8_t>(verifier, VT_NET_TYPE) &&
           verifier.EndTable();
  }
};

struct T_LOGIN_RQBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_s_rq_head(const commonpack::S_RQ_HEAD *s_rq_head) { fbb_.AddStruct(T_LOGIN_RQ::VT_S_RQ_HEAD, s_rq_head); }
  void add_ap_id(int32_t ap_id) { fbb_.AddElement<int32_t>(T_LOGIN_RQ::VT_AP_ID, ap_id, 0); }
  void add_client_time(uint64_t client_time) { fbb_.AddElement<uint64_t>(T_LOGIN_RQ::VT_CLIENT_TIME, client_time, 0); }
  void add_cookie(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> cookie) { fbb_.AddOffset(T_LOGIN_RQ::VT_COOKIE, cookie); }
  void add_tgt(flatbuffers::Offset<flatbuffers::String> tgt) { fbb_.AddOffset(T_LOGIN_RQ::VT_TGT, tgt); }
  void add_client_version(flatbuffers::Offset<flatbuffers::String> client_version) { fbb_.AddOffset(T_LOGIN_RQ::VT_CLIENT_VERSION, client_version); }
  void add_platform(int8_t platform) { fbb_.AddElement<int8_t>(T_LOGIN_RQ::VT_PLATFORM, platform, 0); }
  void add_device_code(flatbuffers::Offset<flatbuffers::String> device_code) { fbb_.AddOffset(T_LOGIN_RQ::VT_DEVICE_CODE, device_code); }
  void add_os_type(flatbuffers::Offset<flatbuffers::String> os_type) { fbb_.AddOffset(T_LOGIN_RQ::VT_OS_TYPE, os_type); }
  void add_net_type(int8_t net_type) { fbb_.AddElement<int8_t>(T_LOGIN_RQ::VT_NET_TYPE, net_type, 0); }
  T_LOGIN_RQBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_LOGIN_RQBuilder &operator=(const T_LOGIN_RQBuilder &);
  flatbuffers::Offset<T_LOGIN_RQ> Finish() {
    auto o = flatbuffers::Offset<T_LOGIN_RQ>(fbb_.EndTable(start_, 10));
    return o;
  }
};

inline flatbuffers::Offset<T_LOGIN_RQ> CreateT_LOGIN_RQ(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RQ_HEAD *s_rq_head = 0,
    int32_t ap_id = 0,
    uint64_t client_time = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> cookie = 0,
    flatbuffers::Offset<flatbuffers::String> tgt = 0,
    flatbuffers::Offset<flatbuffers::String> client_version = 0,
    int8_t platform = 0,
    flatbuffers::Offset<flatbuffers::String> device_code = 0,
    flatbuffers::Offset<flatbuffers::String> os_type = 0,
    int8_t net_type = 0) {
  T_LOGIN_RQBuilder builder_(_fbb);
  builder_.add_client_time(client_time);
  builder_.add_os_type(os_type);
  builder_.add_device_code(device_code);
  builder_.add_client_version(client_version);
  builder_.add_tgt(tgt);
  builder_.add_cookie(cookie);
  builder_.add_ap_id(ap_id);
  builder_.add_s_rq_head(s_rq_head);
  builder_.add_net_type(net_type);
  builder_.add_platform(platform);
  return builder_.Finish();
}

inline flatbuffers::Offset<T_LOGIN_RQ> CreateT_LOGIN_RQDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RQ_HEAD *s_rq_head = 0,
    int32_t ap_id = 0,
    uint64_t client_time = 0,
    const std::vector<uint8_t> *cookie = nullptr,
    const char *tgt = nullptr,
    const char *client_version = nullptr,
    int8_t platform = 0,
    const char *device_code = nullptr,
    const char *os_type = nullptr,
    int8_t net_type = 0) {
  return CreateT_LOGIN_RQ(_fbb, s_rq_head, ap_id, client_time, cookie ? _fbb.CreateVector<uint8_t>(*cookie) : 0, tgt ? _fbb.CreateString(tgt) : 0, client_version ? _fbb.CreateString(client_version) : 0, platform, device_code ? _fbb.CreateString(device_code) : 0, os_type ? _fbb.CreateString(os_type) : 0, net_type);
}

inline const syspack::T_LOGIN_RQ *GetT_LOGIN_RQ(const void *buf) {
  return flatbuffers::GetRoot<syspack::T_LOGIN_RQ>(buf);
}

inline bool VerifyT_LOGIN_RQBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<syspack::T_LOGIN_RQ>(nullptr);
}

inline void FinishT_LOGIN_RQBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<syspack::T_LOGIN_RQ> root) {
  fbb.Finish(root);
}

}  // namespace syspack

#endif  // FLATBUFFERS_GENERATED_FBLOGINRQ_SYSPACK_H_
