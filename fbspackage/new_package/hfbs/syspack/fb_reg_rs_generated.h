// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBREGRS_SYSPACK_H_
#define FLATBUFFERS_GENERATED_FBREGRS_SYSPACK_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace syspack {

struct T_REG_RS;

struct T_REG_RS FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_S_RS_HEAD = 4,
    VT_ACCOUNT_INFO = 6,
    VT_USER_ID = 8,
    VT_REG_TOKEN = 10
  };
  const commonpack::S_RS_HEAD *s_rs_head() const { return GetStruct<const commonpack::S_RS_HEAD *>(VT_S_RS_HEAD); }
  const commonpack::ACCOUNT_INFO *account_info() const { return GetPointer<const commonpack::ACCOUNT_INFO *>(VT_ACCOUNT_INFO); }
  uint64_t user_id() const { return GetField<uint64_t>(VT_USER_ID, 0); }
  const flatbuffers::String *reg_token() const { return GetPointer<const flatbuffers::String *>(VT_REG_TOKEN); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<commonpack::S_RS_HEAD>(verifier, VT_S_RS_HEAD) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ACCOUNT_INFO) &&
           verifier.VerifyTable(account_info()) &&
           VerifyField<uint64_t>(verifier, VT_USER_ID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_REG_TOKEN) &&
           verifier.Verify(reg_token()) &&
           verifier.EndTable();
  }
};

struct T_REG_RSBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_s_rs_head(const commonpack::S_RS_HEAD *s_rs_head) { fbb_.AddStruct(T_REG_RS::VT_S_RS_HEAD, s_rs_head); }
  void add_account_info(flatbuffers::Offset<commonpack::ACCOUNT_INFO> account_info) { fbb_.AddOffset(T_REG_RS::VT_ACCOUNT_INFO, account_info); }
  void add_user_id(uint64_t user_id) { fbb_.AddElement<uint64_t>(T_REG_RS::VT_USER_ID, user_id, 0); }
  void add_reg_token(flatbuffers::Offset<flatbuffers::String> reg_token) { fbb_.AddOffset(T_REG_RS::VT_REG_TOKEN, reg_token); }
  T_REG_RSBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_REG_RSBuilder &operator=(const T_REG_RSBuilder &);
  flatbuffers::Offset<T_REG_RS> Finish() {
    auto o = flatbuffers::Offset<T_REG_RS>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<T_REG_RS> CreateT_REG_RS(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RS_HEAD *s_rs_head = 0,
    flatbuffers::Offset<commonpack::ACCOUNT_INFO> account_info = 0,
    uint64_t user_id = 0,
    flatbuffers::Offset<flatbuffers::String> reg_token = 0) {
  T_REG_RSBuilder builder_(_fbb);
  builder_.add_user_id(user_id);
  builder_.add_reg_token(reg_token);
  builder_.add_account_info(account_info);
  builder_.add_s_rs_head(s_rs_head);
  return builder_.Finish();
}

inline flatbuffers::Offset<T_REG_RS> CreateT_REG_RSDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RS_HEAD *s_rs_head = 0,
    flatbuffers::Offset<commonpack::ACCOUNT_INFO> account_info = 0,
    uint64_t user_id = 0,
    const char *reg_token = nullptr) {
  return CreateT_REG_RS(_fbb, s_rs_head, account_info, user_id, reg_token ? _fbb.CreateString(reg_token) : 0);
}

inline const syspack::T_REG_RS *GetT_REG_RS(const void *buf) {
  return flatbuffers::GetRoot<syspack::T_REG_RS>(buf);
}

inline bool VerifyT_REG_RSBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<syspack::T_REG_RS>(nullptr);
}

inline void FinishT_REG_RSBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<syspack::T_REG_RS> root) {
  fbb.Finish(root);
}

}  // namespace syspack

#endif  // FLATBUFFERS_GENERATED_FBREGRS_SYSPACK_H_
