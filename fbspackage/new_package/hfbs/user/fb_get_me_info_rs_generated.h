// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBGETMEINFORS_USERPACK_H_
#define FLATBUFFERS_GENERATED_FBGETMEINFORS_USERPACK_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace userpack {

struct T_GET_ME_INFO_RS;

struct T_GET_ME_INFO_RS FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_S_RS_HEAD = 4,
    VT_TOKEN = 6,
    VT_VERIFICATION = 8,
    VT_USER_ID = 10,
    VT_USER_NAME = 12,
    VT_BIRTHDAY = 14,
    VT_CITY = 16,
    VT_PROVINCE = 18,
    VT_SIGNATURE = 20,
    VT_MOBILE = 22,
    VT_NICK_NAME = 24,
    VT_SEX = 26,
    VT_MAIL = 28
  };
  const commonpack::S_RS_HEAD *s_rs_head() const { return GetStruct<const commonpack::S_RS_HEAD *>(VT_S_RS_HEAD); }
  const flatbuffers::String *token() const { return GetPointer<const flatbuffers::String *>(VT_TOKEN); }
  const flatbuffers::String *verification() const { return GetPointer<const flatbuffers::String *>(VT_VERIFICATION); }
  uint64_t user_id() const { return GetField<uint64_t>(VT_USER_ID, 0); }
  const flatbuffers::String *user_name() const { return GetPointer<const flatbuffers::String *>(VT_USER_NAME); }
  uint64_t birthday() const { return GetField<uint64_t>(VT_BIRTHDAY, 0); }
  const flatbuffers::String *city() const { return GetPointer<const flatbuffers::String *>(VT_CITY); }
  const flatbuffers::String *province() const { return GetPointer<const flatbuffers::String *>(VT_PROVINCE); }
  const flatbuffers::String *signature() const { return GetPointer<const flatbuffers::String *>(VT_SIGNATURE); }
  uint64_t mobile() const { return GetField<uint64_t>(VT_MOBILE, 0); }
  const flatbuffers::String *nick_name() const { return GetPointer<const flatbuffers::String *>(VT_NICK_NAME); }
  int8_t sex() const { return GetField<int8_t>(VT_SEX, 0); }
  const flatbuffers::String *mail() const { return GetPointer<const flatbuffers::String *>(VT_MAIL); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<commonpack::S_RS_HEAD>(verifier, VT_S_RS_HEAD) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TOKEN) &&
           verifier.Verify(token()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_VERIFICATION) &&
           verifier.Verify(verification()) &&
           VerifyField<uint64_t>(verifier, VT_USER_ID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_USER_NAME) &&
           verifier.Verify(user_name()) &&
           VerifyField<uint64_t>(verifier, VT_BIRTHDAY) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CITY) &&
           verifier.Verify(city()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_PROVINCE) &&
           verifier.Verify(province()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_SIGNATURE) &&
           verifier.Verify(signature()) &&
           VerifyField<uint64_t>(verifier, VT_MOBILE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NICK_NAME) &&
           verifier.Verify(nick_name()) &&
           VerifyField<int8_t>(verifier, VT_SEX) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_MAIL) &&
           verifier.Verify(mail()) &&
           verifier.EndTable();
  }
};

struct T_GET_ME_INFO_RSBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_s_rs_head(const commonpack::S_RS_HEAD *s_rs_head) { fbb_.AddStruct(T_GET_ME_INFO_RS::VT_S_RS_HEAD, s_rs_head); }
  void add_token(flatbuffers::Offset<flatbuffers::String> token) { fbb_.AddOffset(T_GET_ME_INFO_RS::VT_TOKEN, token); }
  void add_verification(flatbuffers::Offset<flatbuffers::String> verification) { fbb_.AddOffset(T_GET_ME_INFO_RS::VT_VERIFICATION, verification); }
  void add_user_id(uint64_t user_id) { fbb_.AddElement<uint64_t>(T_GET_ME_INFO_RS::VT_USER_ID, user_id, 0); }
  void add_user_name(flatbuffers::Offset<flatbuffers::String> user_name) { fbb_.AddOffset(T_GET_ME_INFO_RS::VT_USER_NAME, user_name); }
  void add_birthday(uint64_t birthday) { fbb_.AddElement<uint64_t>(T_GET_ME_INFO_RS::VT_BIRTHDAY, birthday, 0); }
  void add_city(flatbuffers::Offset<flatbuffers::String> city) { fbb_.AddOffset(T_GET_ME_INFO_RS::VT_CITY, city); }
  void add_province(flatbuffers::Offset<flatbuffers::String> province) { fbb_.AddOffset(T_GET_ME_INFO_RS::VT_PROVINCE, province); }
  void add_signature(flatbuffers::Offset<flatbuffers::String> signature) { fbb_.AddOffset(T_GET_ME_INFO_RS::VT_SIGNATURE, signature); }
  void add_mobile(uint64_t mobile) { fbb_.AddElement<uint64_t>(T_GET_ME_INFO_RS::VT_MOBILE, mobile, 0); }
  void add_nick_name(flatbuffers::Offset<flatbuffers::String> nick_name) { fbb_.AddOffset(T_GET_ME_INFO_RS::VT_NICK_NAME, nick_name); }
  void add_sex(int8_t sex) { fbb_.AddElement<int8_t>(T_GET_ME_INFO_RS::VT_SEX, sex, 0); }
  void add_mail(flatbuffers::Offset<flatbuffers::String> mail) { fbb_.AddOffset(T_GET_ME_INFO_RS::VT_MAIL, mail); }
  T_GET_ME_INFO_RSBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_GET_ME_INFO_RSBuilder &operator=(const T_GET_ME_INFO_RSBuilder &);
  flatbuffers::Offset<T_GET_ME_INFO_RS> Finish() {
    auto o = flatbuffers::Offset<T_GET_ME_INFO_RS>(fbb_.EndTable(start_, 13));
    return o;
  }
};

inline flatbuffers::Offset<T_GET_ME_INFO_RS> CreateT_GET_ME_INFO_RS(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RS_HEAD *s_rs_head = 0,
    flatbuffers::Offset<flatbuffers::String> token = 0,
    flatbuffers::Offset<flatbuffers::String> verification = 0,
    uint64_t user_id = 0,
    flatbuffers::Offset<flatbuffers::String> user_name = 0,
    uint64_t birthday = 0,
    flatbuffers::Offset<flatbuffers::String> city = 0,
    flatbuffers::Offset<flatbuffers::String> province = 0,
    flatbuffers::Offset<flatbuffers::String> signature = 0,
    uint64_t mobile = 0,
    flatbuffers::Offset<flatbuffers::String> nick_name = 0,
    int8_t sex = 0,
    flatbuffers::Offset<flatbuffers::String> mail = 0) {
  T_GET_ME_INFO_RSBuilder builder_(_fbb);
  builder_.add_mobile(mobile);
  builder_.add_birthday(birthday);
  builder_.add_user_id(user_id);
  builder_.add_mail(mail);
  builder_.add_nick_name(nick_name);
  builder_.add_signature(signature);
  builder_.add_province(province);
  builder_.add_city(city);
  builder_.add_user_name(user_name);
  builder_.add_verification(verification);
  builder_.add_token(token);
  builder_.add_s_rs_head(s_rs_head);
  builder_.add_sex(sex);
  return builder_.Finish();
}

inline flatbuffers::Offset<T_GET_ME_INFO_RS> CreateT_GET_ME_INFO_RSDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RS_HEAD *s_rs_head = 0,
    const char *token = nullptr,
    const char *verification = nullptr,
    uint64_t user_id = 0,
    const char *user_name = nullptr,
    uint64_t birthday = 0,
    const char *city = nullptr,
    const char *province = nullptr,
    const char *signature = nullptr,
    uint64_t mobile = 0,
    const char *nick_name = nullptr,
    int8_t sex = 0,
    const char *mail = nullptr) {
  return CreateT_GET_ME_INFO_RS(_fbb, s_rs_head, token ? _fbb.CreateString(token) : 0, verification ? _fbb.CreateString(verification) : 0, user_id, user_name ? _fbb.CreateString(user_name) : 0, birthday, city ? _fbb.CreateString(city) : 0, province ? _fbb.CreateString(province) : 0, signature ? _fbb.CreateString(signature) : 0, mobile, nick_name ? _fbb.CreateString(nick_name) : 0, sex, mail ? _fbb.CreateString(mail) : 0);
}

inline const userpack::T_GET_ME_INFO_RS *GetT_GET_ME_INFO_RS(const void *buf) {
  return flatbuffers::GetRoot<userpack::T_GET_ME_INFO_RS>(buf);
}

inline bool VerifyT_GET_ME_INFO_RSBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<userpack::T_GET_ME_INFO_RS>(nullptr);
}

inline void FinishT_GET_ME_INFO_RSBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<userpack::T_GET_ME_INFO_RS> root) {
  fbb.Finish(root);
}

}  // namespace userpack

#endif  // FLATBUFFERS_GENERATED_FBGETMEINFORS_USERPACK_H_
