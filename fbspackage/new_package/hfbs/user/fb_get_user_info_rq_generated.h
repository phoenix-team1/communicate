// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBGETUSERINFORQ_USERPACK_H_
#define FLATBUFFERS_GENERATED_FBGETUSERINFORQ_USERPACK_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace userpack {

struct T_GET_USER_INFO_RQ;

struct T_GET_USER_INFO_RQ FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_S_RQ_HEAD = 4,
    VT_USER_MSG = 6
  };
  const commonpack::S_RQ_HEAD *s_rq_head() const { return GetStruct<const commonpack::S_RQ_HEAD *>(VT_S_RQ_HEAD); }
  const flatbuffers::String *user_msg() const { return GetPointer<const flatbuffers::String *>(VT_USER_MSG); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<commonpack::S_RQ_HEAD>(verifier, VT_S_RQ_HEAD) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_USER_MSG) &&
           verifier.Verify(user_msg()) &&
           verifier.EndTable();
  }
};

struct T_GET_USER_INFO_RQBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_s_rq_head(const commonpack::S_RQ_HEAD *s_rq_head) { fbb_.AddStruct(T_GET_USER_INFO_RQ::VT_S_RQ_HEAD, s_rq_head); }
  void add_user_msg(flatbuffers::Offset<flatbuffers::String> user_msg) { fbb_.AddOffset(T_GET_USER_INFO_RQ::VT_USER_MSG, user_msg); }
  T_GET_USER_INFO_RQBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_GET_USER_INFO_RQBuilder &operator=(const T_GET_USER_INFO_RQBuilder &);
  flatbuffers::Offset<T_GET_USER_INFO_RQ> Finish() {
    auto o = flatbuffers::Offset<T_GET_USER_INFO_RQ>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<T_GET_USER_INFO_RQ> CreateT_GET_USER_INFO_RQ(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RQ_HEAD *s_rq_head = 0,
    flatbuffers::Offset<flatbuffers::String> user_msg = 0) {
  T_GET_USER_INFO_RQBuilder builder_(_fbb);
  builder_.add_user_msg(user_msg);
  builder_.add_s_rq_head(s_rq_head);
  return builder_.Finish();
}

inline flatbuffers::Offset<T_GET_USER_INFO_RQ> CreateT_GET_USER_INFO_RQDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RQ_HEAD *s_rq_head = 0,
    const char *user_msg = nullptr) {
  return CreateT_GET_USER_INFO_RQ(_fbb, s_rq_head, user_msg ? _fbb.CreateString(user_msg) : 0);
}

inline const userpack::T_GET_USER_INFO_RQ *GetT_GET_USER_INFO_RQ(const void *buf) {
  return flatbuffers::GetRoot<userpack::T_GET_USER_INFO_RQ>(buf);
}

inline bool VerifyT_GET_USER_INFO_RQBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<userpack::T_GET_USER_INFO_RQ>(nullptr);
}

inline void FinishT_GET_USER_INFO_RQBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<userpack::T_GET_USER_INFO_RQ> root) {
  fbb.Finish(root);
}

}  // namespace userpack

#endif  // FLATBUFFERS_GENERATED_FBGETUSERINFORQ_USERPACK_H_
