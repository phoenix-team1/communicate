// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBGETUSERLSTINFORS_USERPACK_H_
#define FLATBUFFERS_GENERATED_FBGETUSERLSTINFORS_USERPACK_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace userpack {

struct T_GET_USERINFO;

struct T_GET_USERLST_INFO_RS;

struct T_GET_USERINFO FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_USER_ID = 4,
    VT_USER_NAME = 6,
    VT_NICK_NAME = 8,
    VT_MOBILE = 10
  };
  uint64_t user_id() const { return GetField<uint64_t>(VT_USER_ID, 0); }
  const flatbuffers::String *user_name() const { return GetPointer<const flatbuffers::String *>(VT_USER_NAME); }
  const flatbuffers::String *nick_name() const { return GetPointer<const flatbuffers::String *>(VT_NICK_NAME); }
  uint64_t mobile() const { return GetField<uint64_t>(VT_MOBILE, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_USER_ID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_USER_NAME) &&
           verifier.Verify(user_name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NICK_NAME) &&
           verifier.Verify(nick_name()) &&
           VerifyField<uint64_t>(verifier, VT_MOBILE) &&
           verifier.EndTable();
  }
};

struct T_GET_USERINFOBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_user_id(uint64_t user_id) { fbb_.AddElement<uint64_t>(T_GET_USERINFO::VT_USER_ID, user_id, 0); }
  void add_user_name(flatbuffers::Offset<flatbuffers::String> user_name) { fbb_.AddOffset(T_GET_USERINFO::VT_USER_NAME, user_name); }
  void add_nick_name(flatbuffers::Offset<flatbuffers::String> nick_name) { fbb_.AddOffset(T_GET_USERINFO::VT_NICK_NAME, nick_name); }
  void add_mobile(uint64_t mobile) { fbb_.AddElement<uint64_t>(T_GET_USERINFO::VT_MOBILE, mobile, 0); }
  T_GET_USERINFOBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_GET_USERINFOBuilder &operator=(const T_GET_USERINFOBuilder &);
  flatbuffers::Offset<T_GET_USERINFO> Finish() {
    auto o = flatbuffers::Offset<T_GET_USERINFO>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<T_GET_USERINFO> CreateT_GET_USERINFO(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t user_id = 0,
    flatbuffers::Offset<flatbuffers::String> user_name = 0,
    flatbuffers::Offset<flatbuffers::String> nick_name = 0,
    uint64_t mobile = 0) {
  T_GET_USERINFOBuilder builder_(_fbb);
  builder_.add_mobile(mobile);
  builder_.add_user_id(user_id);
  builder_.add_nick_name(nick_name);
  builder_.add_user_name(user_name);
  return builder_.Finish();
}

inline flatbuffers::Offset<T_GET_USERINFO> CreateT_GET_USERINFODirect(flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t user_id = 0,
    const char *user_name = nullptr,
    const char *nick_name = nullptr,
    uint64_t mobile = 0) {
  return CreateT_GET_USERINFO(_fbb, user_id, user_name ? _fbb.CreateString(user_name) : 0, nick_name ? _fbb.CreateString(nick_name) : 0, mobile);
}

struct T_GET_USERLST_INFO_RS FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_S_RS_HEAD = 4,
    VT_USER_LST_INFO = 6,
    VT_USER_NO_LST = 8
  };
  const commonpack::S_RS_HEAD *s_rs_head() const { return GetStruct<const commonpack::S_RS_HEAD *>(VT_S_RS_HEAD); }
  const flatbuffers::Vector<flatbuffers::Offset<T_GET_USERINFO>> *user_lst_info() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<T_GET_USERINFO>> *>(VT_USER_LST_INFO); }
  const flatbuffers::Vector<uint64_t> *user_no_lst() const { return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_USER_NO_LST); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<commonpack::S_RS_HEAD>(verifier, VT_S_RS_HEAD) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_USER_LST_INFO) &&
           verifier.Verify(user_lst_info()) &&
           verifier.VerifyVectorOfTables(user_lst_info()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_USER_NO_LST) &&
           verifier.Verify(user_no_lst()) &&
           verifier.EndTable();
  }
};

struct T_GET_USERLST_INFO_RSBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_s_rs_head(const commonpack::S_RS_HEAD *s_rs_head) { fbb_.AddStruct(T_GET_USERLST_INFO_RS::VT_S_RS_HEAD, s_rs_head); }
  void add_user_lst_info(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<T_GET_USERINFO>>> user_lst_info) { fbb_.AddOffset(T_GET_USERLST_INFO_RS::VT_USER_LST_INFO, user_lst_info); }
  void add_user_no_lst(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> user_no_lst) { fbb_.AddOffset(T_GET_USERLST_INFO_RS::VT_USER_NO_LST, user_no_lst); }
  T_GET_USERLST_INFO_RSBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_GET_USERLST_INFO_RSBuilder &operator=(const T_GET_USERLST_INFO_RSBuilder &);
  flatbuffers::Offset<T_GET_USERLST_INFO_RS> Finish() {
    auto o = flatbuffers::Offset<T_GET_USERLST_INFO_RS>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<T_GET_USERLST_INFO_RS> CreateT_GET_USERLST_INFO_RS(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RS_HEAD *s_rs_head = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<T_GET_USERINFO>>> user_lst_info = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> user_no_lst = 0) {
  T_GET_USERLST_INFO_RSBuilder builder_(_fbb);
  builder_.add_user_no_lst(user_no_lst);
  builder_.add_user_lst_info(user_lst_info);
  builder_.add_s_rs_head(s_rs_head);
  return builder_.Finish();
}

inline flatbuffers::Offset<T_GET_USERLST_INFO_RS> CreateT_GET_USERLST_INFO_RSDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RS_HEAD *s_rs_head = 0,
    const std::vector<flatbuffers::Offset<T_GET_USERINFO>> *user_lst_info = nullptr,
    const std::vector<uint64_t> *user_no_lst = nullptr) {
  return CreateT_GET_USERLST_INFO_RS(_fbb, s_rs_head, user_lst_info ? _fbb.CreateVector<flatbuffers::Offset<T_GET_USERINFO>>(*user_lst_info) : 0, user_no_lst ? _fbb.CreateVector<uint64_t>(*user_no_lst) : 0);
}

inline const userpack::T_GET_USERLST_INFO_RS *GetT_GET_USERLST_INFO_RS(const void *buf) {
  return flatbuffers::GetRoot<userpack::T_GET_USERLST_INFO_RS>(buf);
}

inline bool VerifyT_GET_USERLST_INFO_RSBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<userpack::T_GET_USERLST_INFO_RS>(nullptr);
}

inline void FinishT_GET_USERLST_INFO_RSBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<userpack::T_GET_USERLST_INFO_RS> root) {
  fbb.Finish(root);
}

}  // namespace userpack

#endif  // FLATBUFFERS_GENERATED_FBGETUSERLSTINFORS_USERPACK_H_
