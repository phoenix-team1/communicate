// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBREGISTERAPNSRQ_USERPACK_H_
#define FLATBUFFERS_GENERATED_FBREGISTERAPNSRQ_USERPACK_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace userpack {

struct T_REGISTER_APNS_RQ;

struct T_REGISTER_APNS_RQ FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_S_RQ_HEAD = 4,
    VT_DEVICE_TOKEN = 6
  };
  const commonpack::S_RQ_HEAD *s_rq_head() const { return GetStruct<const commonpack::S_RQ_HEAD *>(VT_S_RQ_HEAD); }
  const flatbuffers::String *device_token() const { return GetPointer<const flatbuffers::String *>(VT_DEVICE_TOKEN); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<commonpack::S_RQ_HEAD>(verifier, VT_S_RQ_HEAD) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DEVICE_TOKEN) &&
           verifier.Verify(device_token()) &&
           verifier.EndTable();
  }
};

struct T_REGISTER_APNS_RQBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_s_rq_head(const commonpack::S_RQ_HEAD *s_rq_head) { fbb_.AddStruct(T_REGISTER_APNS_RQ::VT_S_RQ_HEAD, s_rq_head); }
  void add_device_token(flatbuffers::Offset<flatbuffers::String> device_token) { fbb_.AddOffset(T_REGISTER_APNS_RQ::VT_DEVICE_TOKEN, device_token); }
  T_REGISTER_APNS_RQBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_REGISTER_APNS_RQBuilder &operator=(const T_REGISTER_APNS_RQBuilder &);
  flatbuffers::Offset<T_REGISTER_APNS_RQ> Finish() {
    auto o = flatbuffers::Offset<T_REGISTER_APNS_RQ>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<T_REGISTER_APNS_RQ> CreateT_REGISTER_APNS_RQ(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RQ_HEAD *s_rq_head = 0,
    flatbuffers::Offset<flatbuffers::String> device_token = 0) {
  T_REGISTER_APNS_RQBuilder builder_(_fbb);
  builder_.add_device_token(device_token);
  builder_.add_s_rq_head(s_rq_head);
  return builder_.Finish();
}

inline flatbuffers::Offset<T_REGISTER_APNS_RQ> CreateT_REGISTER_APNS_RQDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RQ_HEAD *s_rq_head = 0,
    const char *device_token = nullptr) {
  return CreateT_REGISTER_APNS_RQ(_fbb, s_rq_head, device_token ? _fbb.CreateString(device_token) : 0);
}

inline const userpack::T_REGISTER_APNS_RQ *GetT_REGISTER_APNS_RQ(const void *buf) {
  return flatbuffers::GetRoot<userpack::T_REGISTER_APNS_RQ>(buf);
}

inline bool VerifyT_REGISTER_APNS_RQBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<userpack::T_REGISTER_APNS_RQ>(nullptr);
}

inline void FinishT_REGISTER_APNS_RQBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<userpack::T_REGISTER_APNS_RQ> root) {
  fbb.Finish(root);
}

}  // namespace userpack

#endif  // FLATBUFFERS_GENERATED_FBREGISTERAPNSRQ_USERPACK_H_
