// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBUPDATEUSERINFORQ_USERPACK_H_
#define FLATBUFFERS_GENERATED_FBUPDATEUSERINFORQ_USERPACK_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace userpack {

struct T_KEYINFO;

struct T_UPDATE_USER_INFO_RQ;

struct T_KEYINFO FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_KEY_NAME = 4,
    VT_KEY_VALUE = 6
  };
  int32_t key_name() const { return GetField<int32_t>(VT_KEY_NAME, 0); }
  const flatbuffers::String *key_value() const { return GetPointer<const flatbuffers::String *>(VT_KEY_VALUE); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_KEY_NAME) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_KEY_VALUE) &&
           verifier.Verify(key_value()) &&
           verifier.EndTable();
  }
};

struct T_KEYINFOBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key_name(int32_t key_name) { fbb_.AddElement<int32_t>(T_KEYINFO::VT_KEY_NAME, key_name, 0); }
  void add_key_value(flatbuffers::Offset<flatbuffers::String> key_value) { fbb_.AddOffset(T_KEYINFO::VT_KEY_VALUE, key_value); }
  T_KEYINFOBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_KEYINFOBuilder &operator=(const T_KEYINFOBuilder &);
  flatbuffers::Offset<T_KEYINFO> Finish() {
    auto o = flatbuffers::Offset<T_KEYINFO>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<T_KEYINFO> CreateT_KEYINFO(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t key_name = 0,
    flatbuffers::Offset<flatbuffers::String> key_value = 0) {
  T_KEYINFOBuilder builder_(_fbb);
  builder_.add_key_value(key_value);
  builder_.add_key_name(key_name);
  return builder_.Finish();
}

inline flatbuffers::Offset<T_KEYINFO> CreateT_KEYINFODirect(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t key_name = 0,
    const char *key_value = nullptr) {
  return CreateT_KEYINFO(_fbb, key_name, key_value ? _fbb.CreateString(key_value) : 0);
}

struct T_UPDATE_USER_INFO_RQ FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_S_RQ_HEAD = 4,
    VT_KEY_LST_INFO = 6
  };
  const commonpack::S_RQ_HEAD *s_rq_head() const { return GetStruct<const commonpack::S_RQ_HEAD *>(VT_S_RQ_HEAD); }
  const flatbuffers::Vector<flatbuffers::Offset<T_KEYINFO>> *key_lst_info() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<T_KEYINFO>> *>(VT_KEY_LST_INFO); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<commonpack::S_RQ_HEAD>(verifier, VT_S_RQ_HEAD) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_KEY_LST_INFO) &&
           verifier.Verify(key_lst_info()) &&
           verifier.VerifyVectorOfTables(key_lst_info()) &&
           verifier.EndTable();
  }
};

struct T_UPDATE_USER_INFO_RQBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_s_rq_head(const commonpack::S_RQ_HEAD *s_rq_head) { fbb_.AddStruct(T_UPDATE_USER_INFO_RQ::VT_S_RQ_HEAD, s_rq_head); }
  void add_key_lst_info(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<T_KEYINFO>>> key_lst_info) { fbb_.AddOffset(T_UPDATE_USER_INFO_RQ::VT_KEY_LST_INFO, key_lst_info); }
  T_UPDATE_USER_INFO_RQBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_UPDATE_USER_INFO_RQBuilder &operator=(const T_UPDATE_USER_INFO_RQBuilder &);
  flatbuffers::Offset<T_UPDATE_USER_INFO_RQ> Finish() {
    auto o = flatbuffers::Offset<T_UPDATE_USER_INFO_RQ>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<T_UPDATE_USER_INFO_RQ> CreateT_UPDATE_USER_INFO_RQ(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RQ_HEAD *s_rq_head = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<T_KEYINFO>>> key_lst_info = 0) {
  T_UPDATE_USER_INFO_RQBuilder builder_(_fbb);
  builder_.add_key_lst_info(key_lst_info);
  builder_.add_s_rq_head(s_rq_head);
  return builder_.Finish();
}

inline flatbuffers::Offset<T_UPDATE_USER_INFO_RQ> CreateT_UPDATE_USER_INFO_RQDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RQ_HEAD *s_rq_head = 0,
    const std::vector<flatbuffers::Offset<T_KEYINFO>> *key_lst_info = nullptr) {
  return CreateT_UPDATE_USER_INFO_RQ(_fbb, s_rq_head, key_lst_info ? _fbb.CreateVector<flatbuffers::Offset<T_KEYINFO>>(*key_lst_info) : 0);
}

inline const userpack::T_UPDATE_USER_INFO_RQ *GetT_UPDATE_USER_INFO_RQ(const void *buf) {
  return flatbuffers::GetRoot<userpack::T_UPDATE_USER_INFO_RQ>(buf);
}

inline bool VerifyT_UPDATE_USER_INFO_RQBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<userpack::T_UPDATE_USER_INFO_RQ>(nullptr);
}

inline void FinishT_UPDATE_USER_INFO_RQBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<userpack::T_UPDATE_USER_INFO_RQ> root) {
  fbb.Finish(root);
}

}  // namespace userpack

#endif  // FLATBUFFERS_GENERATED_FBUPDATEUSERINFORQ_USERPACK_H_
