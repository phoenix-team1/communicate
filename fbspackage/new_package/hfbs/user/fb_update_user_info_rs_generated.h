// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBUPDATEUSERINFORS_USERPACK_H_
#define FLATBUFFERS_GENERATED_FBUPDATEUSERINFORS_USERPACK_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"
#include "fb_update_user_info_rq_generated.h"

namespace userpack {

struct T_UPDATE_USER_INFO_RS;

struct T_UPDATE_USER_INFO_RS FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_S_RS_HEAD = 4,
    VT_KEY_LST_INFO = 6
  };
  const commonpack::S_RS_HEAD *s_rs_head() const { return GetStruct<const commonpack::S_RS_HEAD *>(VT_S_RS_HEAD); }
  const flatbuffers::Vector<flatbuffers::Offset<userpack::T_KEYINFO>> *key_lst_info() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<userpack::T_KEYINFO>> *>(VT_KEY_LST_INFO); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<commonpack::S_RS_HEAD>(verifier, VT_S_RS_HEAD) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_KEY_LST_INFO) &&
           verifier.Verify(key_lst_info()) &&
           verifier.VerifyVectorOfTables(key_lst_info()) &&
           verifier.EndTable();
  }
};

struct T_UPDATE_USER_INFO_RSBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_s_rs_head(const commonpack::S_RS_HEAD *s_rs_head) { fbb_.AddStruct(T_UPDATE_USER_INFO_RS::VT_S_RS_HEAD, s_rs_head); }
  void add_key_lst_info(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<userpack::T_KEYINFO>>> key_lst_info) { fbb_.AddOffset(T_UPDATE_USER_INFO_RS::VT_KEY_LST_INFO, key_lst_info); }
  T_UPDATE_USER_INFO_RSBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_UPDATE_USER_INFO_RSBuilder &operator=(const T_UPDATE_USER_INFO_RSBuilder &);
  flatbuffers::Offset<T_UPDATE_USER_INFO_RS> Finish() {
    auto o = flatbuffers::Offset<T_UPDATE_USER_INFO_RS>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<T_UPDATE_USER_INFO_RS> CreateT_UPDATE_USER_INFO_RS(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RS_HEAD *s_rs_head = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<userpack::T_KEYINFO>>> key_lst_info = 0) {
  T_UPDATE_USER_INFO_RSBuilder builder_(_fbb);
  builder_.add_key_lst_info(key_lst_info);
  builder_.add_s_rs_head(s_rs_head);
  return builder_.Finish();
}

inline flatbuffers::Offset<T_UPDATE_USER_INFO_RS> CreateT_UPDATE_USER_INFO_RSDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RS_HEAD *s_rs_head = 0,
    const std::vector<flatbuffers::Offset<userpack::T_KEYINFO>> *key_lst_info = nullptr) {
  return CreateT_UPDATE_USER_INFO_RS(_fbb, s_rs_head, key_lst_info ? _fbb.CreateVector<flatbuffers::Offset<userpack::T_KEYINFO>>(*key_lst_info) : 0);
}

inline const userpack::T_UPDATE_USER_INFO_RS *GetT_UPDATE_USER_INFO_RS(const void *buf) {
  return flatbuffers::GetRoot<userpack::T_UPDATE_USER_INFO_RS>(buf);
}

inline bool VerifyT_UPDATE_USER_INFO_RSBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<userpack::T_UPDATE_USER_INFO_RS>(nullptr);
}

inline void FinishT_UPDATE_USER_INFO_RSBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<userpack::T_UPDATE_USER_INFO_RS> root) {
  fbb.Finish(root);
}

}  // namespace userpack

#endif  // FLATBUFFERS_GENERATED_FBUPDATEUSERINFORS_USERPACK_H_
