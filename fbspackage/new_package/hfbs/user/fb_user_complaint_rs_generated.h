// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBUSERCOMPLAINTRS_USERPACK_H_
#define FLATBUFFERS_GENERATED_FBUSERCOMPLAINTRS_USERPACK_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"

namespace userpack {

struct T_USER_COMPLAINT_RS;

struct T_USER_COMPLAINT_RS FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_S_RS_HEAD = 4,
    VT_USER_ID = 6,
    VT_TYPE = 8,
    VT_REASON = 10
  };
  const commonpack::S_RS_HEAD *s_rs_head() const { return GetStruct<const commonpack::S_RS_HEAD *>(VT_S_RS_HEAD); }
  uint64_t user_id() const { return GetField<uint64_t>(VT_USER_ID, 0); }
  int8_t type() const { return GetField<int8_t>(VT_TYPE, 0); }
  const flatbuffers::String *reason() const { return GetPointer<const flatbuffers::String *>(VT_REASON); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<commonpack::S_RS_HEAD>(verifier, VT_S_RS_HEAD) &&
           VerifyField<uint64_t>(verifier, VT_USER_ID) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_REASON) &&
           verifier.Verify(reason()) &&
           verifier.EndTable();
  }
};

struct T_USER_COMPLAINT_RSBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_s_rs_head(const commonpack::S_RS_HEAD *s_rs_head) { fbb_.AddStruct(T_USER_COMPLAINT_RS::VT_S_RS_HEAD, s_rs_head); }
  void add_user_id(uint64_t user_id) { fbb_.AddElement<uint64_t>(T_USER_COMPLAINT_RS::VT_USER_ID, user_id, 0); }
  void add_type(int8_t type) { fbb_.AddElement<int8_t>(T_USER_COMPLAINT_RS::VT_TYPE, type, 0); }
  void add_reason(flatbuffers::Offset<flatbuffers::String> reason) { fbb_.AddOffset(T_USER_COMPLAINT_RS::VT_REASON, reason); }
  T_USER_COMPLAINT_RSBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  T_USER_COMPLAINT_RSBuilder &operator=(const T_USER_COMPLAINT_RSBuilder &);
  flatbuffers::Offset<T_USER_COMPLAINT_RS> Finish() {
    auto o = flatbuffers::Offset<T_USER_COMPLAINT_RS>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<T_USER_COMPLAINT_RS> CreateT_USER_COMPLAINT_RS(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RS_HEAD *s_rs_head = 0,
    uint64_t user_id = 0,
    int8_t type = 0,
    flatbuffers::Offset<flatbuffers::String> reason = 0) {
  T_USER_COMPLAINT_RSBuilder builder_(_fbb);
  builder_.add_user_id(user_id);
  builder_.add_reason(reason);
  builder_.add_s_rs_head(s_rs_head);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<T_USER_COMPLAINT_RS> CreateT_USER_COMPLAINT_RSDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const commonpack::S_RS_HEAD *s_rs_head = 0,
    uint64_t user_id = 0,
    int8_t type = 0,
    const char *reason = nullptr) {
  return CreateT_USER_COMPLAINT_RS(_fbb, s_rs_head, user_id, type, reason ? _fbb.CreateString(reason) : 0);
}

inline const userpack::T_USER_COMPLAINT_RS *GetT_USER_COMPLAINT_RS(const void *buf) {
  return flatbuffers::GetRoot<userpack::T_USER_COMPLAINT_RS>(buf);
}

inline bool VerifyT_USER_COMPLAINT_RSBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<userpack::T_USER_COMPLAINT_RS>(nullptr);
}

inline void FinishT_USER_COMPLAINT_RSBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<userpack::T_USER_COMPLAINT_RS> root) {
  fbb.Finish(root);
}

}  // namespace userpack

#endif  // FLATBUFFERS_GENERATED_FBUSERCOMPLAINTRS_USERPACK_H_
