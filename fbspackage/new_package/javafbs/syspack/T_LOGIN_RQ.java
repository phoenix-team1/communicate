// automatically generated by the FlatBuffers compiler, do not modify

package syspack;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class T_LOGIN_RQ extends Table {
  public static T_LOGIN_RQ getRootAsT_LOGIN_RQ(ByteBuffer _bb) { return getRootAsT_LOGIN_RQ(_bb, new T_LOGIN_RQ()); }
  public static T_LOGIN_RQ getRootAsT_LOGIN_RQ(ByteBuffer _bb, T_LOGIN_RQ obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public T_LOGIN_RQ __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public commonpack.S_RQ_HEAD sRqHead() { return sRqHead(new commonpack.S_RQ_HEAD()); }
  public commonpack.S_RQ_HEAD sRqHead(commonpack.S_RQ_HEAD obj) { int o = __offset(4); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public int apId() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public long clientTime() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public int cookie(int j) { int o = __offset(10); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int cookieLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer cookieAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public String tgt() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tgtAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public String clientVersion() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer clientVersionAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public byte platform() { int o = __offset(16); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public String deviceCode() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer deviceCodeAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public String osType() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer osTypeAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public byte netType() { int o = __offset(22); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static void startT_LOGIN_RQ(FlatBufferBuilder builder) { builder.startObject(10); }
  public static void addSRqHead(FlatBufferBuilder builder, int sRqHeadOffset) { builder.addStruct(0, sRqHeadOffset, 0); }
  public static void addApId(FlatBufferBuilder builder, int apId) { builder.addInt(1, apId, 0); }
  public static void addClientTime(FlatBufferBuilder builder, long clientTime) { builder.addLong(2, clientTime, 0L); }
  public static void addCookie(FlatBufferBuilder builder, int cookieOffset) { builder.addOffset(3, cookieOffset, 0); }
  public static int createCookieVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startCookieVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addTgt(FlatBufferBuilder builder, int tgtOffset) { builder.addOffset(4, tgtOffset, 0); }
  public static void addClientVersion(FlatBufferBuilder builder, int clientVersionOffset) { builder.addOffset(5, clientVersionOffset, 0); }
  public static void addPlatform(FlatBufferBuilder builder, byte platform) { builder.addByte(6, platform, 0); }
  public static void addDeviceCode(FlatBufferBuilder builder, int deviceCodeOffset) { builder.addOffset(7, deviceCodeOffset, 0); }
  public static void addOsType(FlatBufferBuilder builder, int osTypeOffset) { builder.addOffset(8, osTypeOffset, 0); }
  public static void addNetType(FlatBufferBuilder builder, byte netType) { builder.addByte(9, netType, 0); }
  public static int endT_LOGIN_RQ(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishT_LOGIN_RQBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
}

