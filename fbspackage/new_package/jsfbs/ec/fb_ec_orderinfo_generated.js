// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var commonpack = commonpack || {};

/**
 * @const
 * @namespace
 */
var ecpack = ecpack || {};

/**
 * @constructor
 */
ecpack.T_ORDER_INFO = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {ecpack.T_ORDER_INFO}
 */
ecpack.T_ORDER_INFO.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {ecpack.T_ORDER_INFO=} obj
 * @returns {ecpack.T_ORDER_INFO}
 */
ecpack.T_ORDER_INFO.getRootAsT_ORDER_INFO = function(bb, obj) {
  return (obj || new ecpack.T_ORDER_INFO).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {flatbuffers.Long}
 */
ecpack.T_ORDER_INFO.prototype.buyerId = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @returns {flatbuffers.Long}
 */
ecpack.T_ORDER_INFO.prototype.orderId = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @returns {flatbuffers.Long}
 */
ecpack.T_ORDER_INFO.prototype.payTime = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @returns {flatbuffers.Long}
 */
ecpack.T_ORDER_INFO.prototype.sellerId = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @returns {flatbuffers.Long}
 */
ecpack.T_ORDER_INFO.prototype.totalAmount = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @returns {number}
 */
ecpack.T_ORDER_INFO.prototype.orderstate = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
ecpack.T_ORDER_INFO.prototype.orderstatestr = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {number} index
 * @param {ecpack.T_GOODSINFTOIMS=} obj
 * @returns {ecpack.T_GOODSINFTOIMS}
 */
ecpack.T_ORDER_INFO.prototype.goodsInfoDto4IMs = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? (obj || new ecpack.T_GOODSINFTOIMS).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
ecpack.T_ORDER_INFO.prototype.goodsInfoDto4IMsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
ecpack.T_ORDER_INFO.startT_ORDER_INFO = function(builder) {
  builder.startObject(8);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} buyerId
 */
ecpack.T_ORDER_INFO.addBuyerId = function(builder, buyerId) {
  builder.addFieldInt64(0, buyerId, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} orderId
 */
ecpack.T_ORDER_INFO.addOrderId = function(builder, orderId) {
  builder.addFieldInt64(1, orderId, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} payTime
 */
ecpack.T_ORDER_INFO.addPayTime = function(builder, payTime) {
  builder.addFieldInt64(2, payTime, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} sellerId
 */
ecpack.T_ORDER_INFO.addSellerId = function(builder, sellerId) {
  builder.addFieldInt64(3, sellerId, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} totalAmount
 */
ecpack.T_ORDER_INFO.addTotalAmount = function(builder, totalAmount) {
  builder.addFieldInt64(4, totalAmount, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} orderstate
 */
ecpack.T_ORDER_INFO.addOrderstate = function(builder, orderstate) {
  builder.addFieldInt32(5, orderstate, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} orderstatestrOffset
 */
ecpack.T_ORDER_INFO.addOrderstatestr = function(builder, orderstatestrOffset) {
  builder.addFieldOffset(6, orderstatestrOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} goodsInfoDto4IMsOffset
 */
ecpack.T_ORDER_INFO.addGoodsInfoDto4IMs = function(builder, goodsInfoDto4IMsOffset) {
  builder.addFieldOffset(7, goodsInfoDto4IMsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
ecpack.T_ORDER_INFO.createGoodsInfoDto4IMsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
ecpack.T_ORDER_INFO.startGoodsInfoDto4IMsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
ecpack.T_ORDER_INFO.endT_ORDER_INFO = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
ecpack.T_ORDER_INFO.finishT_ORDER_INFOBuffer = function(builder, offset) {
  builder.finish(offset);
};

// Exports for Node.js and RequireJS
this.commonpack = commonpack;
this.ecpack = ecpack;
