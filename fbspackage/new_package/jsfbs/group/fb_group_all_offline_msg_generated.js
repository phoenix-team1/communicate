// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var commonpack = commonpack || {};

/**
 * @const
 * @namespace
 */
var grouppack = grouppack || {};

/**
 * @constructor
 */
grouppack.T_GROUP_ALL_OFFLINE_MSG = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {grouppack.T_GROUP_ALL_OFFLINE_MSG}
 */
grouppack.T_GROUP_ALL_OFFLINE_MSG.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {grouppack.T_GROUP_ALL_OFFLINE_MSG=} obj
 * @returns {grouppack.T_GROUP_ALL_OFFLINE_MSG}
 */
grouppack.T_GROUP_ALL_OFFLINE_MSG.getRootAsT_GROUP_ALL_OFFLINE_MSG = function(bb, obj) {
  return (obj || new grouppack.T_GROUP_ALL_OFFLINE_MSG).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
grouppack.T_GROUP_ALL_OFFLINE_MSG.prototype.isFinish = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
};

/**
 * @returns {flatbuffers.Long}
 */
grouppack.T_GROUP_ALL_OFFLINE_MSG.prototype.groupId = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @param {number} index
 * @param {grouppack.T_OFFLINE_GROUP_MSG=} obj
 * @returns {grouppack.T_OFFLINE_GROUP_MSG}
 */
grouppack.T_GROUP_ALL_OFFLINE_MSG.prototype.sOfflineMsgList = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new grouppack.T_OFFLINE_GROUP_MSG).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
grouppack.T_GROUP_ALL_OFFLINE_MSG.prototype.sOfflineMsgListLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
grouppack.T_GROUP_ALL_OFFLINE_MSG.startT_GROUP_ALL_OFFLINE_MSG = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} isFinish
 */
grouppack.T_GROUP_ALL_OFFLINE_MSG.addIsFinish = function(builder, isFinish) {
  builder.addFieldInt8(0, isFinish, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} groupId
 */
grouppack.T_GROUP_ALL_OFFLINE_MSG.addGroupId = function(builder, groupId) {
  builder.addFieldInt64(1, groupId, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} sOfflineMsgListOffset
 */
grouppack.T_GROUP_ALL_OFFLINE_MSG.addSOfflineMsgList = function(builder, sOfflineMsgListOffset) {
  builder.addFieldOffset(2, sOfflineMsgListOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
grouppack.T_GROUP_ALL_OFFLINE_MSG.createSOfflineMsgListVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
grouppack.T_GROUP_ALL_OFFLINE_MSG.startSOfflineMsgListVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
grouppack.T_GROUP_ALL_OFFLINE_MSG.endT_GROUP_ALL_OFFLINE_MSG = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
grouppack.T_GROUP_ALL_OFFLINE_MSG.finishT_GROUP_ALL_OFFLINE_MSGBuffer = function(builder, offset) {
  builder.finish(offset);
};

// Exports for Node.js and RequireJS
this.commonpack = commonpack;
this.grouppack = grouppack;
