// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var commonpack = commonpack || {};

/**
 * @const
 * @namespace
 */
var grouppack = grouppack || {};

/**
 * @constructor
 */
grouppack.T_GROUP_TYPE_INFO = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {grouppack.T_GROUP_TYPE_INFO}
 */
grouppack.T_GROUP_TYPE_INFO.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {grouppack.T_GROUP_TYPE_INFO=} obj
 * @returns {grouppack.T_GROUP_TYPE_INFO}
 */
grouppack.T_GROUP_TYPE_INFO.getRootAsT_GROUP_TYPE_INFO = function(bb, obj) {
  return (obj || new grouppack.T_GROUP_TYPE_INFO).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
grouppack.T_GROUP_TYPE_INFO.prototype.groupMaxCount = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
grouppack.T_GROUP_TYPE_INFO.prototype.groupType = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
grouppack.T_GROUP_TYPE_INFO.prototype.groupIsShow = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
grouppack.T_GROUP_TYPE_INFO.prototype.groupAddMaxCount = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
grouppack.T_GROUP_TYPE_INFO.startT_GROUP_TYPE_INFO = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} groupMaxCount
 */
grouppack.T_GROUP_TYPE_INFO.addGroupMaxCount = function(builder, groupMaxCount) {
  builder.addFieldInt32(0, groupMaxCount, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} groupType
 */
grouppack.T_GROUP_TYPE_INFO.addGroupType = function(builder, groupType) {
  builder.addFieldInt32(1, groupType, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} groupIsShow
 */
grouppack.T_GROUP_TYPE_INFO.addGroupIsShow = function(builder, groupIsShow) {
  builder.addFieldInt8(2, groupIsShow, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} groupAddMaxCount
 */
grouppack.T_GROUP_TYPE_INFO.addGroupAddMaxCount = function(builder, groupAddMaxCount) {
  builder.addFieldInt32(3, groupAddMaxCount, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
grouppack.T_GROUP_TYPE_INFO.endT_GROUP_TYPE_INFO = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
grouppack.T_GROUP_TYPE_INFO.finishT_GROUP_TYPE_INFOBuffer = function(builder, offset) {
  builder.finish(offset);
};

// Exports for Node.js and RequireJS
this.commonpack = commonpack;
this.grouppack = grouppack;
