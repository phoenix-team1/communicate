# automatically generated by the FlatBuffers compiler, do not modify

# namespace: commonpack

import flatbuffers

class S_MSG(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsS_MSG(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = S_MSG()
        x.Init(buf, n + offset)
        return x

    # S_MSG
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # S_MSG
    def AppId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # S_MSG
    def SessionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # S_MSG
    def ChatType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # S_MSG
    def MType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # S_MSG
    def SType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # S_MSG
    def ExtType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # S_MSG
    def MsgContent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # S_MSG
    def MsgTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # S_MSG
    def SendUserName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

def S_MSGStart(builder): builder.StartObject(9)
def S_MSGAddAppId(builder, appId): builder.PrependInt16Slot(0, appId, 0)
def S_MSGAddSessionId(builder, sessionId): builder.PrependInt32Slot(1, sessionId, 0)
def S_MSGAddChatType(builder, chatType): builder.PrependInt16Slot(2, chatType, 0)
def S_MSGAddMType(builder, mType): builder.PrependInt32Slot(3, mType, 0)
def S_MSGAddSType(builder, sType): builder.PrependInt32Slot(4, sType, 0)
def S_MSGAddExtType(builder, extType): builder.PrependInt32Slot(5, extType, 0)
def S_MSGAddMsgContent(builder, msgContent): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(msgContent), 0)
def S_MSGAddMsgTime(builder, msgTime): builder.PrependInt64Slot(7, msgTime, 0)
def S_MSGAddSendUserName(builder, sendUserName): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(sendUserName), 0)
def S_MSGEnd(builder): return builder.EndObject()
