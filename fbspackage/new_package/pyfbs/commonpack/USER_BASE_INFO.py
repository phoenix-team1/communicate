# automatically generated by the FlatBuffers compiler, do not modify

# namespace: commonpack

import flatbuffers

class USER_BASE_INFO(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsUSER_BASE_INFO(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = USER_BASE_INFO()
        x.Init(buf, n + offset)
        return x

    # USER_BASE_INFO
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # USER_BASE_INFO
    def UserId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # USER_BASE_INFO
    def UserNickName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # USER_BASE_INFO
    def UserGroupIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def USER_BASE_INFOStart(builder): builder.StartObject(3)
def USER_BASE_INFOAddUserId(builder, userId): builder.PrependUint64Slot(0, userId, 0)
def USER_BASE_INFOAddUserNickName(builder, userNickName): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(userNickName), 0)
def USER_BASE_INFOAddUserGroupIndex(builder, userGroupIndex): builder.PrependInt32Slot(2, userGroupIndex, 0)
def USER_BASE_INFOEnd(builder): return builder.EndObject()
