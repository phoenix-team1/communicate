# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ecpack

import flatbuffers

class T_ECMSG_INFO(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsT_ECMSG_INFO(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = T_ECMSG_INFO()
        x.Init(buf, n + offset)
        return x

    # T_ECMSG_INFO
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # T_ECMSG_INFO
    def AppId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # T_ECMSG_INFO
    def SessionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # T_ECMSG_INFO
    def ChatType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # T_ECMSG_INFO
    def MType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # T_ECMSG_INFO
    def SType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # T_ECMSG_INFO
    def ExtType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # T_ECMSG_INFO
    def FromId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # T_ECMSG_INFO
    def ToId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # T_ECMSG_INFO
    def BId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # T_ECMSG_INFO
    def CId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # T_ECMSG_INFO
    def WId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # T_ECMSG_INFO
    def MessageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # T_ECMSG_INFO
    def MsgTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # T_ECMSG_INFO
    def MsgContent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # T_ECMSG_INFO
    def SendUserName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

def T_ECMSG_INFOStart(builder): builder.StartObject(15)
def T_ECMSG_INFOAddAppId(builder, appId): builder.PrependInt16Slot(0, appId, 0)
def T_ECMSG_INFOAddSessionId(builder, sessionId): builder.PrependInt32Slot(1, sessionId, 0)
def T_ECMSG_INFOAddChatType(builder, chatType): builder.PrependInt16Slot(2, chatType, 0)
def T_ECMSG_INFOAddMType(builder, mType): builder.PrependInt32Slot(3, mType, 0)
def T_ECMSG_INFOAddSType(builder, sType): builder.PrependInt32Slot(4, sType, 0)
def T_ECMSG_INFOAddExtType(builder, extType): builder.PrependInt32Slot(5, extType, 0)
def T_ECMSG_INFOAddFromId(builder, fromId): builder.PrependUint64Slot(6, fromId, 0)
def T_ECMSG_INFOAddToId(builder, toId): builder.PrependUint64Slot(7, toId, 0)
def T_ECMSG_INFOAddBId(builder, bId): builder.PrependUint64Slot(8, bId, 0)
def T_ECMSG_INFOAddCId(builder, cId): builder.PrependUint64Slot(9, cId, 0)
def T_ECMSG_INFOAddWId(builder, wId): builder.PrependUint64Slot(10, wId, 0)
def T_ECMSG_INFOAddMessageId(builder, messageId): builder.PrependUint64Slot(11, messageId, 0)
def T_ECMSG_INFOAddMsgTime(builder, msgTime): builder.PrependInt64Slot(12, msgTime, 0)
def T_ECMSG_INFOAddMsgContent(builder, msgContent): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(msgContent), 0)
def T_ECMSG_INFOAddSendUserName(builder, sendUserName): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(sendUserName), 0)
def T_ECMSG_INFOEnd(builder): return builder.EndObject()
