# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ecpack

import flatbuffers

class T_ORDER_INFO(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsT_ORDER_INFO(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = T_ORDER_INFO()
        x.Init(buf, n + offset)
        return x

    # T_ORDER_INFO
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # T_ORDER_INFO
    def BuyerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # T_ORDER_INFO
    def OrderId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # T_ORDER_INFO
    def PayTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # T_ORDER_INFO
    def SellerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # T_ORDER_INFO
    def TotalAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # T_ORDER_INFO
    def Orderstate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # T_ORDER_INFO
    def Orderstatestr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # T_ORDER_INFO
    def GoodsInfoDto4IMs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .T_GOODSINFTOIMS import T_GOODSINFTOIMS
            obj = T_GOODSINFTOIMS()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # T_ORDER_INFO
    def GoodsInfoDto4IMsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def T_ORDER_INFOStart(builder): builder.StartObject(8)
def T_ORDER_INFOAddBuyerId(builder, buyerId): builder.PrependUint64Slot(0, buyerId, 0)
def T_ORDER_INFOAddOrderId(builder, orderId): builder.PrependUint64Slot(1, orderId, 0)
def T_ORDER_INFOAddPayTime(builder, payTime): builder.PrependUint64Slot(2, payTime, 0)
def T_ORDER_INFOAddSellerId(builder, sellerId): builder.PrependUint64Slot(3, sellerId, 0)
def T_ORDER_INFOAddTotalAmount(builder, totalAmount): builder.PrependUint64Slot(4, totalAmount, 0)
def T_ORDER_INFOAddOrderstate(builder, orderstate): builder.PrependInt32Slot(5, orderstate, 0)
def T_ORDER_INFOAddOrderstatestr(builder, orderstatestr): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(orderstatestr), 0)
def T_ORDER_INFOAddGoodsInfoDto4IMs(builder, goodsInfoDto4IMs): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(goodsInfoDto4IMs), 0)
def T_ORDER_INFOStartGoodsInfoDto4IMsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def T_ORDER_INFOEnd(builder): return builder.EndObject()
