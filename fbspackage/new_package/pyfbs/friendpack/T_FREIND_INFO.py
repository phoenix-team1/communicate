# automatically generated by the FlatBuffers compiler, do not modify

# namespace: friendpack

import flatbuffers

class T_FREIND_INFO(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsT_FREIND_INFO(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = T_FREIND_INFO()
        x.Init(buf, n + offset)
        return x

    # T_FREIND_INFO
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # T_FREIND_INFO
    def UserId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # T_FREIND_INFO
    def SourceType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # T_FREIND_INFO
    def RemarkName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # T_FREIND_INFO
    def OpMsg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # T_FREIND_INFO
    def OptType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # T_FREIND_INFO
    def BlackType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # T_FREIND_INFO
    def OpTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def T_FREIND_INFOStart(builder): builder.StartObject(7)
def T_FREIND_INFOAddUserId(builder, userId): builder.PrependUint64Slot(0, userId, 0)
def T_FREIND_INFOAddSourceType(builder, sourceType): builder.PrependInt8Slot(1, sourceType, 0)
def T_FREIND_INFOAddRemarkName(builder, remarkName): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(remarkName), 0)
def T_FREIND_INFOAddOpMsg(builder, opMsg): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(opMsg), 0)
def T_FREIND_INFOAddOptType(builder, optType): builder.PrependInt32Slot(4, optType, 0)
def T_FREIND_INFOAddBlackType(builder, blackType): builder.PrependInt32Slot(5, blackType, 0)
def T_FREIND_INFOAddOpTime(builder, opTime): builder.PrependInt64Slot(6, opTime, 0)
def T_FREIND_INFOEnd(builder): return builder.EndObject()
