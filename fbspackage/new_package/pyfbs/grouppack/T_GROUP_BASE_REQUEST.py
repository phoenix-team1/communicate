# automatically generated by the FlatBuffers compiler, do not modify

# namespace: grouppack

import flatbuffers

class T_GROUP_BASE_REQUEST(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsT_GROUP_BASE_REQUEST(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = T_GROUP_BASE_REQUEST()
        x.Init(buf, n + offset)
        return x

    # T_GROUP_BASE_REQUEST
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # T_GROUP_BASE_REQUEST
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # T_GROUP_BASE_REQUEST
    def NextMessageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def T_GROUP_BASE_REQUESTStart(builder): builder.StartObject(2)
def T_GROUP_BASE_REQUESTAddGroupId(builder, groupId): builder.PrependUint64Slot(0, groupId, 0)
def T_GROUP_BASE_REQUESTAddNextMessageId(builder, nextMessageId): builder.PrependUint64Slot(1, nextMessageId, 0)
def T_GROUP_BASE_REQUESTEnd(builder): return builder.EndObject()
