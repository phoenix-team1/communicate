# automatically generated by the FlatBuffers compiler, do not modify

# namespace: grouppack

import flatbuffers

class T_GROUP_CHAT_NOTIFY_RQ(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsT_GROUP_CHAT_NOTIFY_RQ(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = T_GROUP_CHAT_NOTIFY_RQ()
        x.Init(buf, n + offset)
        return x

    # T_GROUP_CHAT_NOTIFY_RQ
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # T_GROUP_CHAT_NOTIFY_RQ
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # T_GROUP_CHAT_NOTIFY_RQ
    def GroupName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

def T_GROUP_CHAT_NOTIFY_RQStart(builder): builder.StartObject(2)
def T_GROUP_CHAT_NOTIFY_RQAddGroupId(builder, groupId): builder.PrependUint64Slot(0, groupId, 0)
def T_GROUP_CHAT_NOTIFY_RQAddGroupName(builder, groupName): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(groupName), 0)
def T_GROUP_CHAT_NOTIFY_RQEnd(builder): return builder.EndObject()
