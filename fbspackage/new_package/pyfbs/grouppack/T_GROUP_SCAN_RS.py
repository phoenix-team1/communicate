# automatically generated by the FlatBuffers compiler, do not modify

# namespace: grouppack

import flatbuffers

class T_GROUP_SCAN_RS(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsT_GROUP_SCAN_RS(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = T_GROUP_SCAN_RS()
        x.Init(buf, n + offset)
        return x

    # T_GROUP_SCAN_RS
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # T_GROUP_SCAN_RS
    def SRsHead(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from .S_RS_HEAD import S_RS_HEAD
            obj = S_RS_HEAD()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # T_GROUP_SCAN_RS
    def UserIdShare(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # T_GROUP_SCAN_RS
    def GroupInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .T_GROUP_BASE_INFO import T_GROUP_BASE_INFO
            obj = T_GROUP_BASE_INFO()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # T_GROUP_SCAN_RS
    def IsMember(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def T_GROUP_SCAN_RSStart(builder): builder.StartObject(4)
def T_GROUP_SCAN_RSAddSRsHead(builder, sRsHead): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sRsHead), 0)
def T_GROUP_SCAN_RSAddUserIdShare(builder, userIdShare): builder.PrependUint64Slot(1, userIdShare, 0)
def T_GROUP_SCAN_RSAddGroupInfo(builder, groupInfo): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(groupInfo), 0)
def T_GROUP_SCAN_RSAddIsMember(builder, isMember): builder.PrependInt32Slot(3, isMember, 0)
def T_GROUP_SCAN_RSEnd(builder): return builder.EndObject()
