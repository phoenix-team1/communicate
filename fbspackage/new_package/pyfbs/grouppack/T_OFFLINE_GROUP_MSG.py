# automatically generated by the FlatBuffers compiler, do not modify

# namespace: grouppack

import flatbuffers

class T_OFFLINE_GROUP_MSG(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsT_OFFLINE_GROUP_MSG(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = T_OFFLINE_GROUP_MSG()
        x.Init(buf, n + offset)
        return x

    # T_OFFLINE_GROUP_MSG
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # T_OFFLINE_GROUP_MSG
    def UserId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # T_OFFLINE_GROUP_MSG
    def MessageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # T_OFFLINE_GROUP_MSG
    def SMsg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .S_MSG import S_MSG
            obj = S_MSG()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # T_OFFLINE_GROUP_MSG
    def BigMsgType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # T_OFFLINE_GROUP_MSG
    def OperateGroupMsg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .T_OPERATE_GROUP_MSG import T_OPERATE_GROUP_MSG
            obj = T_OPERATE_GROUP_MSG()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # T_OFFLINE_GROUP_MSG
    def MessageOldId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # T_OFFLINE_GROUP_MSG
    def GroupInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .T_GROUP_BASE_INFO import T_GROUP_BASE_INFO
            obj = T_GROUP_BASE_INFO()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def T_OFFLINE_GROUP_MSGStart(builder): builder.StartObject(7)
def T_OFFLINE_GROUP_MSGAddUserId(builder, userId): builder.PrependUint64Slot(0, userId, 0)
def T_OFFLINE_GROUP_MSGAddMessageId(builder, messageId): builder.PrependUint64Slot(1, messageId, 0)
def T_OFFLINE_GROUP_MSGAddSMsg(builder, sMsg): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(sMsg), 0)
def T_OFFLINE_GROUP_MSGAddBigMsgType(builder, bigMsgType): builder.PrependInt32Slot(3, bigMsgType, 0)
def T_OFFLINE_GROUP_MSGAddOperateGroupMsg(builder, operateGroupMsg): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(operateGroupMsg), 0)
def T_OFFLINE_GROUP_MSGAddMessageOldId(builder, messageOldId): builder.PrependUint64Slot(5, messageOldId, 0)
def T_OFFLINE_GROUP_MSGAddGroupInfo(builder, groupInfo): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(groupInfo), 0)
def T_OFFLINE_GROUP_MSGEnd(builder): return builder.EndObject()
