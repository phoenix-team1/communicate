# automatically generated by the FlatBuffers compiler, do not modify

# namespace: momentspack

import flatbuffers

class T_MOMENTS_ARTICLE_ADD_RQ(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsT_MOMENTS_ARTICLE_ADD_RQ(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = T_MOMENTS_ARTICLE_ADD_RQ()
        x.Init(buf, n + offset)
        return x

    # T_MOMENTS_ARTICLE_ADD_RQ
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # T_MOMENTS_ARTICLE_ADD_RQ
    def SRqHead(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from .S_RQ_HEAD import S_RQ_HEAD
            obj = S_RQ_HEAD()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # T_MOMENTS_ARTICLE_ADD_RQ
    def ArticleId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # T_MOMENTS_ARTICLE_ADD_RQ
    def UserId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # T_MOMENTS_ARTICLE_ADD_RQ
    def UserNickname(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # T_MOMENTS_ARTICLE_ADD_RQ
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # T_MOMENTS_ARTICLE_ADD_RQ
    def ContentType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # T_MOMENTS_ARTICLE_ADD_RQ
    def Content(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # T_MOMENTS_ARTICLE_ADD_RQ
    def PrivType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # T_MOMENTS_ARTICLE_ADD_RQ
    def WhiteList(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # T_MOMENTS_ARTICLE_ADD_RQ
    def BlackList(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

def T_MOMENTS_ARTICLE_ADD_RQStart(builder): builder.StartObject(10)
def T_MOMENTS_ARTICLE_ADD_RQAddSRqHead(builder, sRqHead): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sRqHead), 0)
def T_MOMENTS_ARTICLE_ADD_RQAddArticleId(builder, articleId): builder.PrependUint64Slot(1, articleId, 0)
def T_MOMENTS_ARTICLE_ADD_RQAddUserId(builder, userId): builder.PrependUint64Slot(2, userId, 0)
def T_MOMENTS_ARTICLE_ADD_RQAddUserNickname(builder, userNickname): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(userNickname), 0)
def T_MOMENTS_ARTICLE_ADD_RQAddTitle(builder, title): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)
def T_MOMENTS_ARTICLE_ADD_RQAddContentType(builder, contentType): builder.PrependInt32Slot(5, contentType, 0)
def T_MOMENTS_ARTICLE_ADD_RQAddContent(builder, content): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(content), 0)
def T_MOMENTS_ARTICLE_ADD_RQAddPrivType(builder, privType): builder.PrependInt32Slot(7, privType, 0)
def T_MOMENTS_ARTICLE_ADD_RQAddWhiteList(builder, whiteList): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(whiteList), 0)
def T_MOMENTS_ARTICLE_ADD_RQAddBlackList(builder, blackList): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(blackList), 0)
def T_MOMENTS_ARTICLE_ADD_RQEnd(builder): return builder.EndObject()
