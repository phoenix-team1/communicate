# automatically generated by the FlatBuffers compiler, do not modify

# namespace: offcialpack

import flatbuffers

class T_CLIENT_OFFCIAL_SEND_ONE_MSG_RQ(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsT_CLIENT_OFFCIAL_SEND_ONE_MSG_RQ(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = T_CLIENT_OFFCIAL_SEND_ONE_MSG_RQ()
        x.Init(buf, n + offset)
        return x

    # T_CLIENT_OFFCIAL_SEND_ONE_MSG_RQ
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # T_CLIENT_OFFCIAL_SEND_ONE_MSG_RQ
    def SRqHead(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from .S_RQ_HEAD import S_RQ_HEAD
            obj = S_RQ_HEAD()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # T_CLIENT_OFFCIAL_SEND_ONE_MSG_RQ
    def MessageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # T_CLIENT_OFFCIAL_SEND_ONE_MSG_RQ
    def OffcialId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # T_CLIENT_OFFCIAL_SEND_ONE_MSG_RQ
    def FansId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # T_CLIENT_OFFCIAL_SEND_ONE_MSG_RQ
    def SMsg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .S_MSG import S_MSG
            obj = S_MSG()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # T_CLIENT_OFFCIAL_SEND_ONE_MSG_RQ
    def BId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # T_CLIENT_OFFCIAL_SEND_ONE_MSG_RQ
    def WId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # T_CLIENT_OFFCIAL_SEND_ONE_MSG_RQ
    def CId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def T_CLIENT_OFFCIAL_SEND_ONE_MSG_RQStart(builder): builder.StartObject(8)
def T_CLIENT_OFFCIAL_SEND_ONE_MSG_RQAddSRqHead(builder, sRqHead): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sRqHead), 0)
def T_CLIENT_OFFCIAL_SEND_ONE_MSG_RQAddMessageId(builder, messageId): builder.PrependUint64Slot(1, messageId, 0)
def T_CLIENT_OFFCIAL_SEND_ONE_MSG_RQAddOffcialId(builder, offcialId): builder.PrependUint64Slot(2, offcialId, 0)
def T_CLIENT_OFFCIAL_SEND_ONE_MSG_RQAddFansId(builder, fansId): builder.PrependUint64Slot(3, fansId, 0)
def T_CLIENT_OFFCIAL_SEND_ONE_MSG_RQAddSMsg(builder, sMsg): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(sMsg), 0)
def T_CLIENT_OFFCIAL_SEND_ONE_MSG_RQAddBId(builder, bId): builder.PrependUint64Slot(5, bId, 0)
def T_CLIENT_OFFCIAL_SEND_ONE_MSG_RQAddWId(builder, wId): builder.PrependUint64Slot(6, wId, 0)
def T_CLIENT_OFFCIAL_SEND_ONE_MSG_RQAddCId(builder, cId): builder.PrependUint64Slot(7, cId, 0)
def T_CLIENT_OFFCIAL_SEND_ONE_MSG_RQEnd(builder): return builder.EndObject()
