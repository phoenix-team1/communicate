# automatically generated by the FlatBuffers compiler, do not modify

# namespace: offcialpack

import flatbuffers

class T_OFFCIAL_OFFLINE_MESSAGE(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsT_OFFCIAL_OFFLINE_MESSAGE(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = T_OFFCIAL_OFFLINE_MESSAGE()
        x.Init(buf, n + offset)
        return x

    # T_OFFCIAL_OFFLINE_MESSAGE
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # T_OFFCIAL_OFFLINE_MESSAGE
    def IsFinish(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # T_OFFCIAL_OFFLINE_MESSAGE
    def OffcialId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # T_OFFCIAL_OFFLINE_MESSAGE
    def SMsg(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .T_OFFLINE_MESSAGE import T_OFFLINE_MESSAGE
            obj = T_OFFLINE_MESSAGE()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # T_OFFCIAL_OFFLINE_MESSAGE
    def SMsgLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # T_OFFCIAL_OFFLINE_MESSAGE
    def BId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # T_OFFCIAL_OFFLINE_MESSAGE
    def WId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # T_OFFCIAL_OFFLINE_MESSAGE
    def CId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def T_OFFCIAL_OFFLINE_MESSAGEStart(builder): builder.StartObject(6)
def T_OFFCIAL_OFFLINE_MESSAGEAddIsFinish(builder, isFinish): builder.PrependInt8Slot(0, isFinish, 0)
def T_OFFCIAL_OFFLINE_MESSAGEAddOffcialId(builder, offcialId): builder.PrependUint64Slot(1, offcialId, 0)
def T_OFFCIAL_OFFLINE_MESSAGEAddSMsg(builder, sMsg): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(sMsg), 0)
def T_OFFCIAL_OFFLINE_MESSAGEStartSMsgVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def T_OFFCIAL_OFFLINE_MESSAGEAddBId(builder, bId): builder.PrependUint64Slot(3, bId, 0)
def T_OFFCIAL_OFFLINE_MESSAGEAddWId(builder, wId): builder.PrependUint64Slot(4, wId, 0)
def T_OFFCIAL_OFFLINE_MESSAGEAddCId(builder, cId): builder.PrependUint64Slot(5, cId, 0)
def T_OFFCIAL_OFFLINE_MESSAGEEnd(builder): return builder.EndObject()
