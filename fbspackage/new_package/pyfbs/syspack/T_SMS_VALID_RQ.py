# automatically generated by the FlatBuffers compiler, do not modify

# namespace: syspack

import flatbuffers

class T_SMS_VALID_RQ(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsT_SMS_VALID_RQ(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = T_SMS_VALID_RQ()
        x.Init(buf, n + offset)
        return x

    # T_SMS_VALID_RQ
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # T_SMS_VALID_RQ
    def SRqHead(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from .S_RQ_HEAD import S_RQ_HEAD
            obj = S_RQ_HEAD()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # T_SMS_VALID_RQ
    def NationCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # T_SMS_VALID_RQ
    def Mobile(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def T_SMS_VALID_RQStart(builder): builder.StartObject(3)
def T_SMS_VALID_RQAddSRqHead(builder, sRqHead): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sRqHead), 0)
def T_SMS_VALID_RQAddNationCode(builder, nationCode): builder.PrependInt32Slot(1, nationCode, 0)
def T_SMS_VALID_RQAddMobile(builder, mobile): builder.PrependUint64Slot(2, mobile, 0)
def T_SMS_VALID_RQEnd(builder): return builder.EndObject()
