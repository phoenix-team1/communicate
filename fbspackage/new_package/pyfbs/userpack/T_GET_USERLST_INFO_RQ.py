# automatically generated by the FlatBuffers compiler, do not modify

# namespace: userpack

import flatbuffers

class T_GET_USERLST_INFO_RQ(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsT_GET_USERLST_INFO_RQ(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = T_GET_USERLST_INFO_RQ()
        x.Init(buf, n + offset)
        return x

    # T_GET_USERLST_INFO_RQ
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # T_GET_USERLST_INFO_RQ
    def SRqHead(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from .S_RQ_HEAD import S_RQ_HEAD
            obj = S_RQ_HEAD()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # T_GET_USERLST_INFO_RQ
    def UserLst(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # T_GET_USERLST_INFO_RQ
    def UserLstLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # T_GET_USERLST_INFO_RQ
    def MobileLst(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # T_GET_USERLST_INFO_RQ
    def MobileLstLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def T_GET_USERLST_INFO_RQStart(builder): builder.StartObject(3)
def T_GET_USERLST_INFO_RQAddSRqHead(builder, sRqHead): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sRqHead), 0)
def T_GET_USERLST_INFO_RQAddUserLst(builder, userLst): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(userLst), 0)
def T_GET_USERLST_INFO_RQStartUserLstVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def T_GET_USERLST_INFO_RQAddMobileLst(builder, mobileLst): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mobileLst), 0)
def T_GET_USERLST_INFO_RQStartMobileLstVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def T_GET_USERLST_INFO_RQEnd(builder): return builder.EndObject()
