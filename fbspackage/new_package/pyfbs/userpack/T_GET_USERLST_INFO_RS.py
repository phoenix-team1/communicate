# automatically generated by the FlatBuffers compiler, do not modify

# namespace: userpack

import flatbuffers

class T_GET_USERLST_INFO_RS(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsT_GET_USERLST_INFO_RS(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = T_GET_USERLST_INFO_RS()
        x.Init(buf, n + offset)
        return x

    # T_GET_USERLST_INFO_RS
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # T_GET_USERLST_INFO_RS
    def SRsHead(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from .S_RS_HEAD import S_RS_HEAD
            obj = S_RS_HEAD()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # T_GET_USERLST_INFO_RS
    def UserLstInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .T_GET_USERINFO import T_GET_USERINFO
            obj = T_GET_USERINFO()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # T_GET_USERLST_INFO_RS
    def UserLstInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # T_GET_USERLST_INFO_RS
    def UserNoLst(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # T_GET_USERLST_INFO_RS
    def UserNoLstLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def T_GET_USERLST_INFO_RSStart(builder): builder.StartObject(3)
def T_GET_USERLST_INFO_RSAddSRsHead(builder, sRsHead): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sRsHead), 0)
def T_GET_USERLST_INFO_RSAddUserLstInfo(builder, userLstInfo): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(userLstInfo), 0)
def T_GET_USERLST_INFO_RSStartUserLstInfoVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def T_GET_USERLST_INFO_RSAddUserNoLst(builder, userNoLst): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(userNoLst), 0)
def T_GET_USERLST_INFO_RSStartUserNoLstVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def T_GET_USERLST_INFO_RSEnd(builder): return builder.EndObject()
